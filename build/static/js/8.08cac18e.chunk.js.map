{"version":3,"sources":["utils/erc20.ts","hooks/useFarmsWithBalance.ts","hooks/useAllEarnings.ts","views/Home/components/CardValue.tsx","views/Home/components/BlzdHarvestBalance.tsx","hooks/useTokenBalance.ts","views/Home/components/BlzdWalletBalance.tsx","views/Home/components/FarmStakingCard.tsx","views/Home/components/BlzdStats.tsx","views/Home/components/TotalValueLockedCard.tsx","views/Home/Home.tsx"],"names":["getContract","provider","address","Web3","eth","Contract","erc20","getTokenBalance","tokenAddress","userAddress","a","contract","methods","balanceOf","call","balance","useFarmsWithBalance","useState","farmsWithBalances","setFarmsWithBalances","account","useWallet","fastRefresh","useRefresh","useEffect","calls","farmsConfig","map","farm","getMasterChefAddress","name","params","pid","multicall","masterChefABI","rawResults","results","index","BigNumber","fetchBalances","useAllEarnings","balances","setBalance","res","fetchAllBalances","CardValue","value","decimals","fontSize","prefix","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","useRef","current","bold","BlzdHarvestBalance","TranslateString","useI18n","earningsSum","reduce","accum","earning","div","pow","toNumber","color","style","lineHeight","useTokenBalance","ethereum","fetchBalance","BlzdWalletBalance","cakeBalance","getCakeAddress","getBalanceNumber","StyledFarmStakingCard","styled","Card","Block","TokenImageWrapper","CardImage","img","Label","theme","colors","textSubtle","Actions","FarmedStakingCard","pendingTx","setPendingTx","balancesWithValue","filter","balanceType","onReward","useAllHarvest","farmWithBalance","harvestAllFarms","useCallback","addWatchBlzdToken","window","request","method","type","options","symbol","image","console","log","size","mb","src","alt","width","height","onClick","scale","marginLeft","id","disabled","length","UnlockButton","fullWidth","StyledBlzdStats","Row","BlzdStats","totalSupply","slowRefresh","setTotalSupply","cakeContract","cakeABI","supply","fetchTotalSupply","useTotalSupply","burnedBalance","bal","useBurnedBalance","farms","useFarms","blzdPrice","usePriceBlzdBusd","circSupply","minus","blzdSupply","marketCap","times","blzdPerBlock","StyledTotalValueLockedCard","TotalValueLockedCard","totalValue","useTotalValue","Hero","mediaQueries","lg","Cards","BaseLayout","sm","Home","Page","as","FarmStakingCard"],"mappings":"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","file":"static/js/8.08cac18e.chunk.js","sourcesContent":["import Web3 from 'web3'\r\nimport { provider as ProviderType } from 'web3-core'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport { AbiItem } from 'web3-utils'\r\nimport erc20 from 'config/abi/erc20.json'\r\n\r\nexport const getContract = (provider: ProviderType, address: string) => {\r\n  const web3 = new Web3(provider)\r\n  const contract = new web3.eth.Contract((erc20 as unknown) as AbiItem, address)\r\n  return contract\r\n}\r\n\r\nexport const getAllowance = async (\r\n  lpContract: Contract,\r\n  masterChefContract: Contract,\r\n  account: string,\r\n): Promise<string> => {\r\n  try {\r\n    const allowance: string = await lpContract.methods.allowance(account, masterChefContract.options.address).call()\r\n    return allowance\r\n  } catch (e) {\r\n    return '0'\r\n  }\r\n}\r\n\r\nexport const getTokenBalance = async (\r\n  provider: ProviderType,\r\n  tokenAddress: string,\r\n  userAddress: string,\r\n): Promise<string> => {\r\n  const contract = getContract(provider, tokenAddress)\r\n  try {\r\n    const balance: string = await contract.methods.balanceOf(userAddress).call()\r\n    return balance\r\n  } catch (e) {\r\n    return '0'\r\n  }\r\n}\r\n","import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\nimport masterChefABI from 'config/abi/masterchef.json'\r\nimport { farmsConfig } from 'config/constants'\r\nimport { FarmConfig } from 'config/constants/types'\r\nimport useRefresh from './useRefresh'\r\n\r\nexport interface FarmWithBalance extends FarmConfig {\r\n  balance: BigNumber\r\n}\r\n\r\nconst useFarmsWithBalance = () => {\r\n  const [farmsWithBalances, setFarmsWithBalances] = useState<FarmWithBalance[]>([])\r\n  const { account } = useWallet()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalances = async () => {\r\n      const calls = farmsConfig.map((farm) => ({\r\n        address: getMasterChefAddress(),\r\n        name: 'pendingBlzd',\r\n        params: [farm.pid, account],\r\n      }))\r\n\r\n      const rawResults = await multicall(masterChefABI, calls)\r\n      const results = farmsConfig.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\r\n\r\n      setFarmsWithBalances(results)\r\n    }\r\n\r\n    if (account) {\r\n      fetchBalances()\r\n    }\r\n  }, [account, fastRefresh])\r\n\r\n  return farmsWithBalances\r\n}\r\n\r\nexport default useFarmsWithBalance\r\n","import { useEffect, useState } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\nimport masterChefABI from 'config/abi/masterchef.json'\r\nimport { farmsConfig } from 'config/constants'\r\nimport useRefresh from './useRefresh'\r\n\r\nconst useAllEarnings = () => {\r\n  const [balances, setBalance] = useState([])\r\n  const { account }: { account: string } = useWallet()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchAllBalances = async () => {\r\n      const calls = farmsConfig.map((farm) => ({\r\n        address: getMasterChefAddress(),\r\n        name: 'pendingBlzd',\r\n        params: [farm.pid, account],\r\n      }))\r\n\r\n      const res = await multicall(masterChefABI, calls)\r\n\r\n      setBalance(res)\r\n    }\r\n\r\n    if (account) {\r\n      fetchAllBalances()\r\n    }\r\n  }, [account, fastRefresh])\r\n\r\n  return balances\r\n}\r\n\r\nexport default useAllEarnings\r\n","import React, { useEffect, useRef } from 'react'\r\nimport { useCountUp } from 'react-countup'\r\nimport { Text } from '@blzd-dev/uikit'\r\n\r\ninterface CardValueProps {\r\n  value: number\r\n  decimals?: number\r\n  fontSize?: string\r\n  prefix?: string\r\n}\r\n\r\nconst CardValue: React.FC<CardValueProps> = ({ value, decimals, fontSize = '40px', prefix }) => {\r\n  const { countUp, update } = useCountUp({\r\n    start: 0,\r\n    end: value,\r\n    duration: 1,\r\n    separator: ',',\r\n    decimals:\r\n      // eslint-disable-next-line no-nested-ternary\r\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\r\n  })\r\n\r\n  const updateValue = useRef(update)\r\n\r\n  useEffect(() => {\r\n    updateValue.current(value)\r\n  }, [value, updateValue])\r\n\r\n  return (\r\n    <Text bold fontSize={fontSize}>\r\n      {prefix}\r\n      {countUp}\r\n    </Text>\r\n  )\r\n}\r\n\r\nexport default CardValue\r\n","import React from 'react'\r\nimport { Text } from '@blzd-dev/uikit'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport BigNumber from 'bignumber.js'\r\nimport useI18n from 'hooks/useI18n'\r\nimport useAllEarnings from 'hooks/useAllEarnings'\r\nimport CardValue from './CardValue'\r\n\r\nconst BlzdHarvestBalance = () => {\r\n  const TranslateString = useI18n()\r\n  const { account } = useWallet()\r\n  const allEarnings = useAllEarnings()\r\n  const earningsSum = allEarnings.reduce((accum, earning) => {\r\n    return accum + new BigNumber(earning).div(new BigNumber(10).pow(18)).toNumber()\r\n  }, 0)\r\n\r\n  if (!account) {\r\n    return (\r\n      <Text color=\"textDisabled\" style={{ lineHeight: '60px' }}>\r\n        {TranslateString(298, 'Locked')}\r\n      </Text>\r\n    )\r\n  }\r\n\r\n  return <CardValue value={earningsSum} />\r\n}\r\n\r\nexport default BlzdHarvestBalance\r\n","import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { provider } from 'web3-core'\r\nimport cakeABI from 'config/abi/cake.json'\r\nimport { getContract } from 'utils/web3'\r\nimport { getTokenBalance } from 'utils/erc20'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport useRefresh from './useRefresh'\r\n\r\nconst useTokenBalance = (tokenAddress: string) => {\r\n  const [balance, setBalance] = useState(new BigNumber(0))\r\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const res = await getTokenBalance(ethereum, tokenAddress, account)\r\n      setBalance(new BigNumber(res))\r\n    }\r\n\r\n    if (account && ethereum) {\r\n      fetchBalance()\r\n    }\r\n  }, [account, ethereum, tokenAddress, fastRefresh])\r\n\r\n  return balance\r\n}\r\n\r\nexport const useTotalSupply = () => {\r\n  const { slowRefresh } = useRefresh()\r\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\r\n\r\n  useEffect(() => {\r\n    async function fetchTotalSupply() {\r\n      const cakeContract = getContract(cakeABI, getCakeAddress())\r\n      const supply = await cakeContract.methods.totalSupply().call()\r\n      setTotalSupply(new BigNumber(supply))\r\n    }\r\n\r\n    fetchTotalSupply()\r\n  }, [slowRefresh])\r\n\r\n  return totalSupply\r\n}\r\n\r\nexport const useBurnedBalance = (tokenAddress: string) => {\r\n  const [balance, setBalance] = useState(new BigNumber(0))\r\n  const { slowRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const cakeContract = getContract(cakeABI, getCakeAddress())\r\n      const bal = await cakeContract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\r\n      setBalance(new BigNumber(bal))\r\n    }\r\n\r\n    fetchBalance()\r\n  }, [tokenAddress, slowRefresh])\r\n\r\n  return balance\r\n}\r\n\r\nexport default useTokenBalance\r\n","import React from 'react'\r\nimport { Text } from '@blzd-dev/uikit'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport useTokenBalance from 'hooks/useTokenBalance'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport CardValue from './CardValue'\r\n\r\nconst BlzdWalletBalance = () => {\r\n  const TranslateString = useI18n()\r\n  const cakeBalance = useTokenBalance(getCakeAddress())\r\n  const { account } = useWallet()\r\n\r\n  if (!account) {\r\n    return (\r\n      <Text color=\"textDisabled\" style={{ lineHeight: '36px' }}>\r\n        {TranslateString(298, 'Locked')}\r\n      </Text>\r\n    )\r\n  }\r\n\r\n  return <CardValue value={getBalanceNumber(cakeBalance)} fontSize=\"24px\" />\r\n}\r\n\r\nexport default BlzdWalletBalance\r\n","import React, { useState, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Card, CardBody, Button } from '@blzd-dev/uikit'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useAllHarvest } from 'hooks/useHarvest'\r\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport BlzdHarvestBalance from './BlzdHarvestBalance'\r\nimport BlzdWalletBalance from './BlzdWalletBalance'\r\n\r\nconst StyledFarmStakingCard = styled(Card)`\r\n  background-image: url('https://raw.githubusercontent.com/octahedron22/smurf-frontend/master/public/images/smurf/2a.png');\r\n  background-size: 256px;\r\n  background-repeat: no-repeat;\r\n  background-position: top right;\r\n  min-height: 376px;\r\n`\r\n\r\nconst Block = styled.div`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst TokenImageWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst CardImage = styled.img`\r\n  margin-right: 8px;\r\n`\r\n\r\nconst Label = styled.div`\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n  font-size: 14px;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  margin-top: 24px;\r\n`\r\n\r\nconst FarmedStakingCard = () => {\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { account } = useWallet()\r\n  const TranslateString = useI18n()\r\n  const farmsWithBalance = useFarmsWithBalance()\r\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.toNumber() > 0)\r\n\r\n  const { onReward } = useAllHarvest(balancesWithValue.map((farmWithBalance) => farmWithBalance.pid))\r\n\r\n  const harvestAllFarms = useCallback(async () => {\r\n    setPendingTx(true)\r\n    try {\r\n      await onReward()\r\n    } catch (error) {\r\n      // TODO: find a way to handle when the user rejects transaction or it fails\r\n    } finally {\r\n      setPendingTx(false)\r\n    }\r\n  }, [onReward])\r\n\r\n  const addWatchBlzdToken = useCallback(async () => {\r\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n    // @ts-ignore\r\n    const provider = window.ethereum\r\n    if (provider) {\r\n      try {\r\n        // wasAdded is a boolean. Like any RPC method, an error may be thrown.\r\n        const wasAdded = await provider.request({\r\n          method: 'wallet_watchAsset',\r\n          params: {\r\n            type: 'ERC20',\r\n            options: {\r\n              address: '0x57067A6BD75c0E95a6A5f158455926e43E79BeB0',\r\n              symbol: 'BLZD',\r\n              decimals: '18',\r\n              image:\r\n                'https://raw.githubusercontent.com/octahedron22/smurf-frontend/master/public/images/farms/smurf.png',\r\n            },\r\n          },\r\n        })\r\n\r\n        if (wasAdded) {\r\n          console.log('Token was added')\r\n        }\r\n      } catch (error) {\r\n        // TODO: find a way to handle when the user rejects transaction or it fails\r\n      }\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <StyledFarmStakingCard>\r\n      <CardBody>\r\n        <Heading size=\"xl\" mb=\"24px\">\r\n          {TranslateString(542, 'Farms & Staking')}\r\n        </Heading>\r\n        <TokenImageWrapper>\r\n          <CardImage\r\n            src=\"https://raw.githubusercontent.com/octahedron22/smurf-frontend/master/public/images/smurf/2.png\"\r\n            alt=\"smurf logo\"\r\n            width={64}\r\n            height={64}\r\n          />\r\n          <Button onClick={addWatchBlzdToken} scale=\"sm\">\r\n            +{' '}\r\n            <img\r\n              style={{ marginLeft: 8 }}\r\n              width={16}\r\n              src=\"https://raw.githubusercontent.com/octahedron22/smurf-frontend/master/public/images/wallet/metamask.png\"\r\n              alt=\"metamask logo\"\r\n            />\r\n          </Button>\r\n        </TokenImageWrapper>\r\n        <Block>\r\n          <BlzdHarvestBalance />\r\n          <Label>{TranslateString(544, 'BLZD to Harvest')}</Label>\r\n        </Block>\r\n        <Block>\r\n          <BlzdWalletBalance />\r\n          <Label>{TranslateString(546, 'BLZD in Wallet')}</Label>\r\n        </Block>\r\n        <Actions>\r\n          {account ? (\r\n            <Button id=\"harvest-all\" disabled={balancesWithValue.length <= 0 || pendingTx} onClick={harvestAllFarms}>\r\n              {pendingTx\r\n                ? TranslateString(548, 'Collecting BLZD')\r\n                : TranslateString(999, `Harvest all (${balancesWithValue.length})`)}\r\n            </Button>\r\n          ) : (\r\n            <UnlockButton fullWidth />\r\n          )}\r\n        </Actions>\r\n      </CardBody>\r\n    </StyledFarmStakingCard>\r\n  )\r\n}\r\n\r\nexport default FarmedStakingCard\r\n","import React from 'react'\r\nimport { Card, CardBody, Heading, Text } from '@blzd-dev/uikit'\r\nimport BigNumber from 'bignumber.js/bignumber'\r\nimport styled from 'styled-components'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport CardValue from './CardValue'\r\nimport { useFarms, usePriceBlzdBusd } from '../../../state/hooks'\r\n\r\nconst StyledBlzdStats = styled(Card)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n`\r\n\r\nconst Row = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  font-size: 14px;\r\n  justify-content: space-between;\r\n  margin-bottom: 8px;\r\n`\r\n\r\nconst BlzdStats = () => {\r\n  const TranslateString = useI18n()\r\n  const totalSupply = useTotalSupply()\r\n  const burnedBalance = useBurnedBalance(getCakeAddress())\r\n  const farms = useFarms()\r\n  const blzdPrice = usePriceBlzdBusd()\r\n  const circSupply = totalSupply ? totalSupply.minus(burnedBalance) : new BigNumber(0)\r\n  const blzdSupply = getBalanceNumber(circSupply)\r\n  const marketCap = blzdPrice.times(circSupply)\r\n\r\n  let blzdPerBlock = 0\r\n  if (farms && farms[0] && farms[0].blzdPerBlock) {\r\n    blzdPerBlock = new BigNumber(farms[0].blzdPerBlock).div(new BigNumber(10).pow(18)).toNumber()\r\n  }\r\n\r\n  return (\r\n    <StyledBlzdStats>\r\n      <CardBody>\r\n        <Heading size=\"xl\" mb=\"24px\">\r\n          {TranslateString(534, 'BLZD Stats')}\r\n        </Heading>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{TranslateString(536, 'Total BLZD Supply')}</Text>\r\n          {blzdSupply && <CardValue fontSize=\"14px\" value={blzdSupply} decimals={0} />}\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{TranslateString(999, 'Market Cap')}</Text>\r\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(marketCap)} decimals={0} prefix=\"$\" />\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{TranslateString(538, 'Total BLZD Burned')}</Text>\r\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(burnedBalance)} decimals={0} />\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{TranslateString(540, 'New BLZD/block')}</Text>\r\n          <Text bold fontSize=\"14px\">\r\n            {blzdPerBlock}\r\n          </Text>\r\n        </Row>\r\n      </CardBody>\r\n    </StyledBlzdStats>\r\n  )\r\n}\r\n\r\nexport default BlzdStats\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Card, CardBody, Heading, Text } from '@blzd-dev/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\n// import { useGetStats } from 'hooks/api'\r\nimport { useTotalValue } from '../../../state/hooks'\r\nimport CardValue from './CardValue'\r\n\r\nconst StyledTotalValueLockedCard = styled(Card)`\r\n  align-items: center;\r\n  display: flex;\r\n  flex: 1;\r\n`\r\n\r\nconst TotalValueLockedCard = () => {\r\n  const TranslateString = useI18n()\r\n  // const data = useGetStats()\r\n  const totalValue = useTotalValue()\r\n  // const tvl = totalValue.toFixed(2);\r\n\r\n  return (\r\n    <StyledTotalValueLockedCard>\r\n      <CardBody>\r\n        <Heading size=\"lg\" mb=\"24px\">\r\n          {TranslateString(999, 'Total Value Locked (TVL)')}\r\n        </Heading>\r\n        <>\r\n          <CardValue value={totalValue.toNumber()} prefix=\"$\" decimals={2} />\r\n          <Text color=\"textSubtle\">{TranslateString(999, 'Across all Farms and Pools')}</Text>\r\n        </>\r\n      </CardBody>\r\n    </StyledTotalValueLockedCard>\r\n  )\r\n}\r\n\r\nexport default TotalValueLockedCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Text, BaseLayout } from '@blzd-dev/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport Page from 'components/layout/Page'\r\nimport FarmStakingCard from './components/FarmStakingCard'\r\n// import LotteryCard from './components/LotteryCard'\r\nimport BlzdStats from './components/BlzdStats'\r\nimport TotalValueLockedCard from './components/TotalValueLockedCard'\r\n// import TwitterCard from './components/TwitterCard'\r\n\r\nconst Hero = styled.div`\r\n  align-items: center;\r\n  background-image: url('https://raw.githubusercontent.com/octahedron22/smurf-frontend/master/public/images/smurf/3.png');\r\n  background-size: 250px;\r\n  background-repeat: no-repeat;\r\n  background-position: top center;\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n  margin: auto;\r\n  margin-bottom: 32px;\r\n  padding-top: 116px;\r\n  text-align: center;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    background-image: url('https://raw.githubusercontent.com/octahedron22/smurf-frontend/master/public/images/smurf/3.png'),\r\n      url('https://raw.githubusercontent.com/octahedron22/smurf-frontend/master/public/images/smurf/3b.png');\r\n    background-size: 260px;\r\n    background-position: left center, right center;\r\n    height: 165px;\r\n    padding-top: 0;\r\n  }\r\n`\r\n\r\nconst Cards = styled(BaseLayout)`\r\n  align-items: stretch;\r\n  justify-content: stretch;\r\n  margin-bottom: 32px;\r\n\r\n  & > div {\r\n    grid-column: span 6;\r\n    width: 100%;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    & > div {\r\n      grid-column: span 8;\r\n    }\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    & > div {\r\n      grid-column: span 6;\r\n    }\r\n  }\r\n`\r\n\r\nconst Home: React.FC = () => {\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    <Page>\r\n      <Hero>\r\n        <Heading as=\"h1\" size=\"xl\" mb=\"24px\" color=\"primary\">\r\n          {TranslateString(576, 'SMURF.MONEY')}\r\n        </Heading>\r\n        <Text>{TranslateString(578, '🧙 The best Place on Binnce Smart Chain to earn Smurfs!')}</Text>\r\n      </Hero>\r\n      <div>\r\n        <Cards>\r\n          <FarmStakingCard />\r\n          <BlzdStats />\r\n        </Cards>\r\n      </div>\r\n      <TotalValueLockedCard />\r\n      {/* <TwitterCard/> */}\r\n    </Page>\r\n  )\r\n}\r\n\r\nexport default Home\r\n"],"sourceRoot":""}