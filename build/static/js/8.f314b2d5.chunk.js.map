{"version":3,"sources":["components/ExpandableSectionButton/ExpandableSectionButton.tsx","utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/DetailsSection.tsx","views/Farms/components/FarmCard/CardHeading.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/components/FarmCard/CardActionsContainer.tsx","utils/compoundApyHelpers.ts","views/Farms/components/FarmCard/ApyCalculatorModal.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/components/FarmTabButtons/index.tsx","views/Farms/components/Divider.tsx","views/Farms/Farms.tsx"],"names":["Wrapper","styled","div","theme","colors","primary","ExpandableSectionButton","onClick","expanded","aria-label","role","color","bold","defaultProps","getLiquidityUrlPathParts","quoteTokenAdresses","quoteTokenSymbol","tokenAddresses","firstPart","process","secondPart","StyledLinkExternal","LinkExternal","text","DetailsSection","bscScanAddress","totalValueFormated","lpLabel","isTokenOnly","TranslateString","useI18n","liquidityUrlPathParts","pancakeLink","link","includes","justifyContent","href","external","Flex","MultiplierTag","Tag","CardHeading","multiplier","farmImage","tokenSymbol","depositFee","alignItems","mb","flexDirection","variant","src","alt","width","height","WithdrawModal","onConfirm","onDismiss","max","tokenName","useState","val","setVal","pendingTx","setPendingTx","fullBalance","useMemo","getFullDisplayBalance","handleChange","useCallback","e","currentTarget","value","handleSelectMax","title","TokenInput","onSelectMax","onChange","symbol","ModalActions","disabled","a","StakeAction","stakedBalance","pid","onUnstake","useUnstake","rawStakedBalance","getBalanceNumber","displayBalance","toLocaleString","useModal","onPresentWithdraw","style","BalanceAndCompound","HarvestAction","earnings","onReward","useHarvest","onStake","useStake","canCompound","rawEarningsBalance","scale","marginBottom","borderRadius","toString","marginTop","Action","CardActions","farm","ethereum","account","removed","requestedApproval","setRequestedApproval","useFarmFromPid","lpAddresses","depositFeeBP","useFarmUser","allowance","tokenBalance","lpAddress","tokenAddress","lpName","lpSymbol","toUpperCase","isApproved","isGreaterThan","lpContract","getContract","onApprove","useApprove","handleApprove","console","error","textTransform","fontSize","pr","mt","UnlockButton","calculateCakeEarnedPerThousandDollars","number","numberOfDays","apyAsDecimal","farmApy","daysAsDecimalOfYear","principal","cakePrice","finalAmount","Math","round","apyModalRoi","amountEarned","amountInvested","toFixed","Grid","GridItem","Description","Text","ApyCalculatorModal","apy","times","BigNumber","toNumber","oneThousandDollarsWorthOfCake","cakeEarnedPerThousand1D","cakeEarnedPerThousand7D","cakeEarnedPerThousand30D","cakeEarnedPerThousand365D","ApyButton","onPresentApyModal","size","ml","RainbowLight","keyframes","StyledCardAccent","FCard","props","card","background","Divider","borderColor","ExpandingWrapper","FarmFinishedSash","FarmCard","bnbPrice","showExpandableSection","setShowExpandableSection","toLowerCase","totalValue","lpTotalInQuoteToken","QuoteToken","BNB","CAKE","Number","undefined","maximumFractionDigits","farmAPY","minimumFractionDigits","display","CardActionsContainer","FarmTabButtons","useRouteMatch","url","isExact","activeIndex","as","Link","to","textSubtle","Farms","farmsProps","path","farmsLP","useFarms","usePriceBlzdBusd","usePriceBnbBusd","useWallet","tokenMode","dispatch","useDispatch","fastRefresh","useRefresh","useEffect","fetchFarmUserDataAsync","activeFarms","filter","inactiveFarms","farmsList","farmsToDisplay","map","cakeRewardPerYear","blzdPerBlock","poolWeight","pow","BLOCKS_PER_YEAR","comparedTo","Page","textAlign","exact","responsive"],"mappings":"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","file":"static/js/8.f314b2d5.chunk.js","sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ChevronDownIcon, ChevronUpIcon, Text } from '@blzd-dev/uikit'\r\n\r\nexport interface ExpandableSectionButtonProps {\r\n  onClick?: () => void\r\n  expanded?: boolean\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  cursor: pointer;\r\n\r\n  svg {\r\n    fill: ${({ theme }) => theme.colors.primary};\r\n  }\r\n`\r\n\r\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\r\n  return (\r\n    <Wrapper aria-label=\"Hide or show expandable content\" role=\"button\" onClick={() => onClick()}>\r\n      <Text color=\"primary\" bold>\r\n        {expanded ? 'Hide' : 'Details'}\r\n      </Text>\r\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nExpandableSectionButton.defaultProps = {\r\n  expanded: false,\r\n}\r\n\r\nexport default ExpandableSectionButton\r\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\r\n// Each part of the url represents a different side of the LP pair.\r\n// In the URL, using the quote token 'BNB' is represented by 'ETH'\r\nconst getLiquidityUrlPathParts = ({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses }) => {\r\n  const chainId = process.env.REACT_APP_CHAIN_ID\r\n  const firstPart = quoteTokenSymbol === 'BNB' ? 'BNB' : quoteTokenAdresses[chainId]\r\n  const secondPart = tokenAddresses[chainId]\r\n  return `${firstPart}/${secondPart}`\r\n}\r\n\r\nexport default getLiquidityUrlPathParts\r\n","import React from 'react'\r\nimport useI18n from 'hooks/useI18n'\r\nimport styled from 'styled-components'\r\nimport { Text, Flex, Link, LinkExternal } from '@blzd-dev/uikit'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { Address } from 'config/constants/types'\r\n\r\nexport interface ExpandableSectionProps {\r\n  bscScanAddress?: string\r\n  removed?: boolean\r\n  totalValueFormated?: string\r\n  lpLabel?: string\r\n  quoteTokenAdresses?: Address\r\n  quoteTokenSymbol?: string\r\n  tokenAddresses: Address\r\n  isTokenOnly?: boolean\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  margin-top: 24px;\r\n`\r\n\r\nconst StyledLinkExternal = styled(LinkExternal)`\r\n  text-decoration: none;\r\n  font-weight: normal;\r\n  color: ${({ theme }) => theme.colors.text};\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  svg {\r\n    padding-left: 4px;\r\n    height: 18px;\r\n    width: auto;\r\n    fill: ${({ theme }) => theme.colors.primary};\r\n  }\r\n`\r\n\r\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\r\n  bscScanAddress,\r\n  // removed,\r\n  totalValueFormated,\r\n  lpLabel,\r\n  quoteTokenAdresses,\r\n  quoteTokenSymbol,\r\n  tokenAddresses,\r\n  isTokenOnly,\r\n}) => {\r\n  const TranslateString = useI18n()\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses })\r\n  const pancakeLink = isTokenOnly\r\n    ? `https://exchange.pancakeswap.finance/#/swap?outputCurrency=${tokenAddresses[process.env.REACT_APP_CHAIN_ID]}`\r\n    : `https://exchange.pancakeswap.finance/#/add/${liquidityUrlPathParts}`\r\n  const link = lpLabel.includes('vBSWAP') ? 'https://bsc.valuedefi.io/#/vswap' : pancakeLink\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text>{TranslateString(316, 'Stake')}:</Text>\r\n        <StyledLinkExternal href={link}>{lpLabel}</StyledLinkExternal>\r\n      </Flex>\r\n\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text>{TranslateString(23, 'Total Liquidity')}:</Text>\r\n        <Text>{totalValueFormated}</Text>\r\n      </Flex>\r\n\r\n      <Flex justifyContent=\"flex-start\">\r\n        <Link external href={bscScanAddress} bold={false}>\r\n          {TranslateString(356, 'View on BscScan')}\r\n        </Link>\r\n      </Flex>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default DetailsSection\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Tag, Flex, Heading, Image } from '@blzd-dev/uikit'\r\nimport { NoFeeTag } from 'components/Tags'\r\n\r\nexport interface ExpandableSectionProps {\r\n  lpLabel?: string\r\n  multiplier?: string\r\n  risk?: number\r\n  depositFee?: number\r\n  farmImage?: string\r\n  tokenSymbol?: string\r\n}\r\n\r\nconst Wrapper = styled(Flex)`\r\n  svg {\r\n    margin-right: 0.25rem;\r\n  }\r\n`\r\n\r\nconst MultiplierTag = styled(Tag)`\r\n  margin-left: 4px;\r\n`\r\n\r\nconst CardHeading: React.FC<ExpandableSectionProps> = ({ lpLabel, multiplier, farmImage, tokenSymbol, depositFee }) => {\r\n  return (\r\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\r\n      <Flex flexDirection=\"column\" alignItems=\"flex-start\">\r\n        <Heading mb=\"4px\">{lpLabel}</Heading>\r\n        <Flex justifyContent=\"center\">\r\n          {depositFee === 0 ? <NoFeeTag /> : null}\r\n          {/* {isCommunityFarm ? <CommunityTag /> : <CoreTag />} */}\r\n          {/* <RiskTag risk={risk} /> */}\r\n          <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\r\n        </Flex>\r\n      </Flex>\r\n      <Image\r\n        src={`https://raw.githubusercontent.com/blzd-dev/blzd-frontend/master/public/images/farms/${farmImage}.png`}\r\n        alt={tokenSymbol}\r\n        width={64}\r\n        height={64}\r\n      />\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default CardHeading\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport { Button, Modal } from '@blzd-dev/uikit'\r\nimport ModalActions from 'components/ModalActions'\r\nimport TokenInput from 'components/TokenInput'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\n\r\ninterface WithdrawModalProps {\r\n  max: BigNumber\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n}\r\n\r\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\r\n  const [val, setVal] = useState('')\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const TranslateString = useI18n()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      setVal(e.currentTarget.value)\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  return (\r\n    <Modal title={`Withdraw ${tokenName}`} onDismiss={onDismiss}>\r\n      <TokenInput\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        value={val}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n      />\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss}>\r\n          {TranslateString(462, 'Cancel')}\r\n        </Button>\r\n        <Button\r\n          disabled={pendingTx}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onConfirm(val)\r\n            setPendingTx(false)\r\n            onDismiss()\r\n          }}\r\n        >\r\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default WithdrawModal\r\n","import React from 'react'\r\n// import styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading, useModal } from '@blzd-dev/uikit'\r\n// import useI18n from 'hooks/useI18n'\r\n// import useStake from 'hooks/useStake'\r\nimport useUnstake from 'hooks/useUnstake'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\n// import DepositModal from '../DepositModal'\r\nimport WithdrawModal from '../WithdrawModal'\r\n\r\ninterface FarmCardActionsProps {\r\n  stakedBalance?: BigNumber\r\n  tokenBalance?: BigNumber\r\n  tokenName?: string\r\n  pid?: number\r\n  depositFeeBP?: number\r\n}\r\n\r\n// const IconButtonWrapper = styled.div`\r\n//   display: flex;\r\n//   svg {\r\n//     width: 20px;\r\n//   }\r\n// `\r\n\r\nconst StakeAction: React.FC<FarmCardActionsProps> = ({ stakedBalance, tokenName, pid }) => {\r\n  // const TranslateString = useI18n()\r\n  // const { onStake } = useStake(pid)\r\n  const { onUnstake } = useUnstake(pid)\r\n\r\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\r\n  const displayBalance = rawStakedBalance.toLocaleString()\r\n\r\n  // const [onPresentDeposit] = useModal(\r\n  //   <DepositModal max={tokenBalance} onConfirm={onStake} tokenName={tokenName} depositFeeBP={depositFeeBP} />,\r\n  // )\r\n  const [onPresentWithdraw] = useModal(\r\n    <WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={tokenName} />,\r\n  )\r\n\r\n  // const renderStakingButtons = () => {\r\n  //   return rawStakedBalance === 0 ? (\r\n  //     <Button style={{ width: 107.72 }} onClick={onPresentDeposit}>\r\n  //       {TranslateString(999, 'Stake')}\r\n  //     </Button>\r\n  //   ) : (\r\n  //     <IconButtonWrapper>\r\n  //       <IconButton style={{ width: 52 }} variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\r\n  //         <MinusIcon color=\"primary\" />\r\n  //       </IconButton>\r\n  //       <IconButton style={{ width: 52 }} variant=\"tertiary\" onClick={onPresentDeposit}>\r\n  //         <AddIcon color=\"primary\" />\r\n  //       </IconButton>\r\n  //     </IconButtonWrapper>\r\n  //   )\r\n  // }\r\n\r\n  const renderUnstakingButtons = () => {\r\n    return (\r\n      <Button style={{ width: 107.72 }} onClick={onPresentWithdraw}>\r\n        Unstake\r\n      </Button>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Heading color={rawStakedBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\r\n      {renderUnstakingButtons()}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default StakeAction\r\n","import React, { useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading } from '@blzd-dev/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useHarvest } from 'hooks/useHarvest'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport styled from 'styled-components'\r\nimport useStake from '../../../../hooks/useStake'\r\n\r\ninterface FarmCardActionsProps {\r\n  earnings?: BigNumber\r\n  pid?: number\r\n}\r\n\r\nconst BalanceAndCompound = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  > button {\r\n    width: 100%;\r\n  }\r\n`\r\n\r\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid }) => {\r\n  const TranslateString = useI18n()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { onReward } = useHarvest(pid)\r\n  const { onStake } = useStake(pid)\r\n\r\n  const canCompound = pid === 0\r\n\r\n  const rawEarningsBalance = getBalanceNumber(earnings)\r\n  const displayBalance = rawEarningsBalance.toLocaleString()\r\n\r\n  return (\r\n    <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Heading color={rawEarningsBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\r\n      <BalanceAndCompound>\r\n        {canCompound ? (\r\n          <Button\r\n            disabled={rawEarningsBalance === 0 || pendingTx}\r\n            scale=\"sm\"\r\n            variant=\"secondary\"\r\n            marginBottom=\"8px\"\r\n            style={{ borderRadius: 12 }}\r\n            onClick={async () => {\r\n              setPendingTx(true)\r\n              await onStake(rawEarningsBalance.toString())\r\n              setPendingTx(false)\r\n            }}\r\n          >\r\n            {TranslateString(999, 'Compound')}\r\n          </Button>\r\n        ) : null}\r\n        <Button\r\n          disabled={rawEarningsBalance === 0 || pendingTx}\r\n          scale={canCompound ? 'sm' : 'md'}\r\n          style={{\r\n            borderRadius: !canCompound ? 16 : 12,\r\n            marginTop: !canCompound ? 8 : 0,\r\n            marginBottom: !canCompound ? 8 : 0,\r\n          }}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onReward()\r\n            setPendingTx(false)\r\n          }}\r\n        >\r\n          {TranslateString(999, 'Harvest')}\r\n        </Button>\r\n      </BalanceAndCompound>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default HarvestAction\r\n","import React, { useMemo, useState, useCallback } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport { provider } from 'web3-core'\r\nimport { getContract } from 'utils/erc20'\r\nimport { Button, Flex, Text } from '@blzd-dev/uikit'\r\nimport { Farm } from 'state/types'\r\nimport { useFarmFromPid, useFarmUser } from 'state/hooks'\r\nimport useI18n from 'hooks/useI18n'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport { useApprove } from 'hooks/useApprove'\r\nimport StakeAction from './StakeAction'\r\nimport HarvestAction from './HarvestAction'\r\n\r\nconst Action = styled.div`\r\n  padding-top: 16px;\r\n`\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apy?: BigNumber\r\n}\r\n\r\ninterface FarmCardActionsProps {\r\n  farm: FarmWithStakedValue\r\n  ethereum?: provider\r\n  account?: string\r\n  removed: boolean\r\n}\r\n\r\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, ethereum, account, removed }) => {\r\n  const TranslateString = useI18n()\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { pid, lpAddresses, tokenAddresses, isTokenOnly, depositFeeBP } = useFarmFromPid(farm.pid)\r\n  const { allowance, tokenBalance, stakedBalance, earnings } = useFarmUser(pid)\r\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\r\n  const tokenAddress = tokenAddresses[process.env.REACT_APP_CHAIN_ID]\r\n  const lpName = farm.lpSymbol.toUpperCase()\r\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\r\n\r\n  const lpContract = useMemo(() => {\r\n    if (isTokenOnly) {\r\n      return getContract(ethereum as provider, tokenAddress)\r\n    }\r\n    return getContract(ethereum as provider, lpAddress)\r\n  }, [ethereum, lpAddress, tokenAddress, isTokenOnly])\r\n\r\n  const { onApprove } = useApprove(lpContract)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove()\r\n      setRequestedApproval(false)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove])\r\n\r\n  const renderApprovalOrStakeButton = () => {\r\n    return removed || isApproved ? (\r\n      <StakeAction\r\n        stakedBalance={stakedBalance}\r\n        tokenBalance={tokenBalance}\r\n        tokenName={lpName}\r\n        pid={pid}\r\n        depositFeeBP={depositFeeBP}\r\n      />\r\n    ) : (\r\n      <Button style={{ width: '100%' }} mt=\"8px\" disabled={requestedApproval} onClick={handleApprove}>\r\n        {TranslateString(999, 'Approve Contract')}\r\n      </Button>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Action>\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\r\n          {/* TODO: Is there a way to get a dynamic value here from useFarmFromSymbol? */}\r\n          BLZD\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {TranslateString(999, 'Earned')}\r\n        </Text>\r\n      </Flex>\r\n      <HarvestAction earnings={earnings} pid={pid} />\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\r\n          {lpName}\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {TranslateString(999, 'Staked')}\r\n        </Text>\r\n      </Flex>\r\n      {!account ? <UnlockButton mt=\"8px\" /> : renderApprovalOrStakeButton()}\r\n    </Action>\r\n  )\r\n}\r\n\r\nexport default CardActions\r\n","const roundToTwoDp = (number) => Math.round(number * 100) / 100\r\n\r\nexport const calculateCakeEarnedPerThousandDollars = ({ numberOfDays, farmApy, cakePrice }) => {\r\n  // Everything here is worked out relative to a year, with the asset compounding daily\r\n  const timesCompounded = 365\r\n  //   We use decimal values rather than % in the math for both APY and the number of days being calculates as a proportion of the year\r\n  const apyAsDecimal = farmApy / 100\r\n  const daysAsDecimalOfYear = numberOfDays / timesCompounded\r\n  //   Calculate the starting CAKE balance with a dollar balance of $1000.\r\n  const principal = 1000 / cakePrice\r\n\r\n  // This is a translation of the typical mathematical compounding APY formula. Details here: https://www.calculatorsoup.com/calculators/financial/compound-interest-calculator.php\r\n  const finalAmount = principal * (1 + apyAsDecimal / timesCompounded) ** (timesCompounded * daysAsDecimalOfYear)\r\n\r\n  // To get the cake earned, deduct the amount after compounding (finalAmount) from the starting CAKE balance (principal)\r\n  const interestEarned = finalAmount - principal\r\n  return roundToTwoDp(interestEarned)\r\n}\r\n\r\nexport const apyModalRoi = ({ amountEarned, amountInvested }) => {\r\n  const percentage = (amountEarned / amountInvested) * 100\r\n  return percentage.toFixed(2)\r\n}\r\n","import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport { Modal, Text, LinkExternal, Flex } from '@blzd-dev/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { calculateCakeEarnedPerThousandDollars, apyModalRoi } from 'utils/compoundApyHelpers'\r\nimport { Address } from 'config/constants/types'\r\n\r\ninterface ApyCalculatorModalProps {\r\n  onDismiss?: () => void\r\n  lpLabel?: string\r\n  cakePrice?: BigNumber\r\n  apy?: BigNumber\r\n  quoteTokenAdresses?: Address\r\n  quoteTokenSymbol?: string\r\n  tokenAddresses: Address\r\n}\r\n\r\nconst Grid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(3, 1fr);\r\n  grid-template-rows: repeat(4, auto);\r\n  margin-bottom: 24px;\r\n`\r\n\r\nconst GridItem = styled.div`\r\n  margin-bottom: '10px';\r\n`\r\n\r\nconst Description = styled(Text)`\r\n  max-width: 320px;\r\n  margin-bottom: 28px;\r\n`\r\n\r\nconst ApyCalculatorModal: React.FC<ApyCalculatorModalProps> = ({\r\n  onDismiss,\r\n  lpLabel,\r\n  quoteTokenAdresses,\r\n  quoteTokenSymbol,\r\n  tokenAddresses,\r\n  cakePrice,\r\n  apy,\r\n}) => {\r\n  const TranslateString = useI18n()\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses })\r\n  const farmApy = apy.times(new BigNumber(100)).toNumber()\r\n  const oneThousandDollarsWorthOfCake = 1000 / cakePrice.toNumber()\r\n\r\n  const cakeEarnedPerThousand1D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 1, farmApy, cakePrice })\r\n  const cakeEarnedPerThousand7D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 7, farmApy, cakePrice })\r\n  const cakeEarnedPerThousand30D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 30, farmApy, cakePrice })\r\n  const cakeEarnedPerThousand365D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 365, farmApy, cakePrice })\r\n\r\n  return (\r\n    <Modal title=\"ROI\" onDismiss={onDismiss}>\r\n      <Grid>\r\n        <GridItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\r\n            {TranslateString(999, 'Timeframe')}\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\r\n            {TranslateString(999, 'ROI')}\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\r\n            {TranslateString(999, 'BLZD per $1000')}\r\n          </Text>\r\n        </GridItem>\r\n        {/* 1 day row */}\r\n        <GridItem>\r\n          <Text>1d</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand1D, amountInvested: oneThousandDollarsWorthOfCake })}%\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{cakeEarnedPerThousand1D}</Text>\r\n        </GridItem>\r\n        {/* 7 day row */}\r\n        <GridItem>\r\n          <Text>7d</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand7D, amountInvested: oneThousandDollarsWorthOfCake })}%\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{cakeEarnedPerThousand7D}</Text>\r\n        </GridItem>\r\n        {/* 30 day row */}\r\n        <GridItem>\r\n          <Text>30d</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand30D, amountInvested: oneThousandDollarsWorthOfCake })}%\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{cakeEarnedPerThousand30D}</Text>\r\n        </GridItem>\r\n        {/* 365 day / APY row */}\r\n        <GridItem>\r\n          <Text>365d(APY)</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand365D, amountInvested: oneThousandDollarsWorthOfCake })}%\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{cakeEarnedPerThousand365D}</Text>\r\n        </GridItem>\r\n      </Grid>\r\n      <Description fontSize=\"12px\" color=\"textSubtle\">\r\n        {TranslateString(\r\n          999,\r\n          'Calculated based on current rates. Compounding once daily. Rates are estimates provided for your convenience only, and by no means represent guaranteed returns.',\r\n        )}\r\n      </Description>\r\n      <Flex justifyContent=\"center\">\r\n        <LinkExternal href={`https://exchange.pancakeswap.finance/#/add/${liquidityUrlPathParts}`}>\r\n          {TranslateString(999, 'Get')} {lpLabel}\r\n        </LinkExternal>\r\n      </Flex>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default ApyCalculatorModal\r\n","import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { CalculateIcon, IconButton, useModal } from '@blzd-dev/uikit'\r\nimport { Address } from 'config/constants/types'\r\nimport ApyCalculatorModal from './ApyCalculatorModal'\r\n\r\nexport interface ApyButtonProps {\r\n  lpLabel?: string\r\n  cakePrice?: BigNumber\r\n  apy?: BigNumber\r\n  quoteTokenAdresses?: Address\r\n  quoteTokenSymbol?: string\r\n  tokenAddresses: Address\r\n}\r\n\r\nconst ApyButton: React.FC<ApyButtonProps> = ({\r\n  lpLabel,\r\n  quoteTokenAdresses,\r\n  quoteTokenSymbol,\r\n  tokenAddresses,\r\n  cakePrice,\r\n  apy,\r\n}) => {\r\n  const [onPresentApyModal] = useModal(\r\n    <ApyCalculatorModal\r\n      lpLabel={lpLabel}\r\n      quoteTokenAdresses={quoteTokenAdresses}\r\n      quoteTokenSymbol={quoteTokenSymbol}\r\n      tokenAddresses={tokenAddresses}\r\n      cakePrice={cakePrice}\r\n      apy={apy}\r\n    />,\r\n  )\r\n\r\n  return (\r\n    <IconButton onClick={onPresentApyModal} variant=\"text\" size=\"sm\" ml=\"4px\">\r\n      <CalculateIcon />\r\n    </IconButton>\r\n  )\r\n}\r\n\r\nexport default ApyButton\r\n","import React, { useMemo, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled, { keyframes } from 'styled-components'\r\nimport { Flex, Text, Skeleton } from '@blzd-dev/uikit'\r\n// import { communityFarms } from 'config/constants'\r\nimport { Farm } from 'state/types'\r\nimport { provider } from 'web3-core'\r\nimport useI18n from 'hooks/useI18n'\r\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\r\nimport { QuoteToken } from 'config/constants/types'\r\nimport DetailsSection from './DetailsSection'\r\nimport CardHeading from './CardHeading'\r\nimport CardActionsContainer from './CardActionsContainer'\r\nimport ApyButton from './ApyButton'\r\n\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apy?: BigNumber\r\n}\r\n\r\nconst RainbowLight = keyframes`\r\n  0% {\r\n    background-position: 0% 50%;\r\n  }\r\n  50% {\r\n    background-position: 100% 50%;\r\n  }\r\n  100% {\r\n    background-position: 0% 50%;\r\n  }\r\n`\r\n\r\nconst StyledCardAccent = styled.div`\r\n  background: linear-gradient(\r\n    45deg,\r\n    rgba(255, 0, 0, 1) 0%,\r\n    rgba(255, 154, 0, 1) 10%,\r\n    rgba(208, 222, 33, 1) 20%,\r\n    rgba(79, 220, 74, 1) 30%,\r\n    rgba(63, 218, 216, 1) 40%,\r\n    rgba(47, 201, 226, 1) 50%,\r\n    rgba(28, 127, 238, 1) 60%,\r\n    rgba(95, 21, 242, 1) 70%,\r\n    rgba(186, 12, 248, 1) 80%,\r\n    rgba(251, 7, 217, 1) 90%,\r\n    rgba(255, 0, 0, 1) 100%\r\n  );\r\n  background-size: 300% 300%;\r\n  animation: ${RainbowLight} 2s linear infinite;\r\n  border-radius: 32px;\r\n  filter: blur(6px);\r\n  position: absolute;\r\n  top: -2px;\r\n  right: -2px;\r\n  bottom: -2px;\r\n  left: -2px;\r\n  z-index: -1;\r\n`\r\n\r\nconst FCard = styled.div`\r\n  align-self: baseline;\r\n  background: ${(props) => props.theme.card.background};\r\n  border-radius: 32px;\r\n  box-shadow: 0px 2px 12px -8px rgba(25, 19, 38, 0.1), 0px 1px 1px rgba(25, 19, 38, 0.05);\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-around;\r\n  padding: 24px;\r\n  position: relative;\r\n  text-align: center;\r\n`\r\n\r\nconst Divider = styled.div`\r\n  background-color: ${({ theme }) => theme.colors.borderColor};\r\n  height: 1px;\r\n  margin: 28px auto;\r\n  width: 100%;\r\n`\r\n\r\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\r\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\r\n  overflow: hidden;\r\n`\r\n\r\ninterface FarmCardProps {\r\n  farm: FarmWithStakedValue\r\n  removed: boolean\r\n  cakePrice?: BigNumber\r\n  bnbPrice?: BigNumber\r\n  ethereum?: provider\r\n  account?: string\r\n}\r\n\r\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, removed, cakePrice, bnbPrice, ethereum, account }) => {\r\n  const TranslateString = useI18n()\r\n\r\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\r\n\r\n  // const isCommunityFarm = communityFarms.includes(farm.tokenSymbol)\r\n  // We assume the token name is coin pair + lp e.g. CAKE-BNB LP, LINK-BNB LP,\r\n  // NAR-CAKE LP. The images should be cake-bnb.svg, link-bnb.svg, nar-cake.svg\r\n  // const farmImage = farm.lpSymbol.split(' ')[0].toLocaleLowerCase()\r\n  const farmImage = farm.isTokenOnly\r\n    ? farm.tokenSymbol.toLowerCase()\r\n    : `${farm.tokenSymbol.toLowerCase()}-${farm.quoteTokenSymbol.toLowerCase()}`\r\n\r\n  const totalValue: BigNumber = useMemo(() => {\r\n    if (!farm.lpTotalInQuoteToken) {\r\n      return null\r\n    }\r\n    if (farm.quoteTokenSymbol === QuoteToken.BNB) {\r\n      return bnbPrice.times(farm.lpTotalInQuoteToken)\r\n    }\r\n    if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\r\n      return cakePrice.times(farm.lpTotalInQuoteToken)\r\n    }\r\n    return farm.lpTotalInQuoteToken\r\n  }, [bnbPrice, cakePrice, farm.lpTotalInQuoteToken, farm.quoteTokenSymbol])\r\n\r\n  const totalValueFormated = totalValue\r\n    ? `$${Number(totalValue).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\r\n    : '-'\r\n\r\n  const lpLabel = farm.lpSymbol\r\n  const earnLabel = 'BLZD'\r\n  const farmAPY =\r\n    farm.apy &&\r\n    farm.apy.times(new BigNumber(100)).toNumber().toLocaleString(undefined, {\r\n      minimumFractionDigits: 2,\r\n      maximumFractionDigits: 2,\r\n    })\r\n\r\n  const { quoteTokenAdresses, quoteTokenSymbol, tokenAddresses, isTokenOnly } = farm\r\n\r\n  return (\r\n    <FCard>\r\n      {farm.tokenSymbol === 'BLZD' && <StyledCardAccent />}\r\n      <CardHeading\r\n        lpLabel={lpLabel}\r\n        multiplier={farm.multiplier}\r\n        depositFee={farm.depositFeeBP}\r\n        farmImage={farmImage}\r\n        tokenSymbol={farm.tokenSymbol}\r\n      />\r\n      {removed && <FarmFinishedSash />}\r\n      {!removed && (\r\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n          <Text>{TranslateString(352, 'APR')}:</Text>\r\n          <Text bold style={{ display: 'flex', alignItems: 'center' }}>\r\n            {farm.apy ? (\r\n              <>\r\n                <ApyButton\r\n                  lpLabel={lpLabel}\r\n                  quoteTokenAdresses={quoteTokenAdresses}\r\n                  quoteTokenSymbol={quoteTokenSymbol}\r\n                  tokenAddresses={tokenAddresses}\r\n                  cakePrice={cakePrice}\r\n                  apy={farm.apy}\r\n                />\r\n                {farmAPY}%\r\n              </>\r\n            ) : (\r\n              <Skeleton height={24} width={80} />\r\n            )}\r\n          </Text>\r\n        </Flex>\r\n      )}\r\n      <Flex justifyContent=\"space-between\" style={{ marginBottom: 12 }}>\r\n        <Text>{TranslateString(318, 'Earn')}:</Text>\r\n        <Text bold>{earnLabel}</Text>\r\n      </Flex>\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text style={{ fontSize: '24px' }}>{TranslateString(10001, 'Deposit Fee')}:</Text>\r\n        <Text bold style={{ fontSize: '24px' }}>\r\n          {farm.depositFeeBP / 100}%\r\n        </Text>\r\n      </Flex>\r\n      <CardActionsContainer farm={farm} ethereum={ethereum} account={account} removed={removed} />\r\n      <Divider />\r\n      <ExpandableSectionButton\r\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\r\n        expanded={showExpandableSection}\r\n      />\r\n      <ExpandingWrapper expanded={showExpandableSection}>\r\n        <DetailsSection\r\n          removed={removed}\r\n          bscScanAddress={\r\n            farm.isTokenOnly\r\n              ? `https://bscscan.com/token/${farm.tokenAddresses[process.env.REACT_APP_CHAIN_ID]}`\r\n              : `https://bscscan.com/token/${farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]}`\r\n          }\r\n          totalValueFormated={totalValueFormated}\r\n          lpLabel={lpLabel}\r\n          quoteTokenAdresses={quoteTokenAdresses}\r\n          quoteTokenSymbol={quoteTokenSymbol}\r\n          tokenAddresses={tokenAddresses}\r\n          isTokenOnly={isTokenOnly}\r\n        />\r\n      </ExpandingWrapper>\r\n    </FCard>\r\n  )\r\n}\r\n\r\nconst FarmFinishedSash = styled.div`\r\n  background-image: url('https://raw.githubusercontent.com/blzd-dev/blzd-frontend/master/public/images/pool-finished-sash.svg');\r\n  background-position: top right;\r\n  background-repeat: not-repeat;\r\n  height: 135px;\r\n  position: absolute;\r\n  right: -24px;\r\n  top: -24px;\r\n  width: 135px;\r\n`\r\n\r\nexport default FarmCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useRouteMatch, Link } from 'react-router-dom'\r\nimport { ButtonMenu, ButtonMenuItem } from '@blzd-dev/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\n\r\nconst FarmTabButtons = () => {\r\n  const { url, isExact } = useRouteMatch()\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    <Wrapper>\r\n      <ButtonMenu activeIndex={!isExact ? 1 : 0} scale=\"sm\" variant=\"subtle\">\r\n        <ButtonMenuItem as={Link} to={`${url}`}>\r\n          {TranslateString(999, 'Active')}\r\n        </ButtonMenuItem>\r\n        <ButtonMenuItem as={Link} to={`${url}/history`}>\r\n          {TranslateString(999, 'Inactive')}\r\n        </ButtonMenuItem>\r\n      </ButtonMenu>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default FarmTabButtons\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin-bottom: 32px;\r\n`\r\n","import styled from 'styled-components'\r\n\r\nexport default styled.div`\r\n  background-color: ${({ theme }) => theme.colors.textSubtle};\r\n  height: 1px;\r\n  margin: 0 auto 32px;\r\n  width: 100%;\r\n`\r\n","import React, { useEffect, useCallback } from 'react'\r\nimport { Route, useRouteMatch } from 'react-router-dom'\r\nimport { useDispatch } from 'react-redux'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { provider } from 'web3-core'\r\nimport { Image, Heading } from '@blzd-dev/uikit'\r\nimport { BLOCKS_PER_YEAR } from 'config'\r\nimport FlexLayout from 'components/layout/Flex'\r\nimport Page from 'components/layout/Page'\r\nimport { useFarms, usePriceBnbBusd, usePriceBlzdBusd } from 'state/hooks'\r\nimport useRefresh from 'hooks/useRefresh'\r\nimport { fetchFarmUserDataAsync } from 'state/actions'\r\nimport { QuoteToken } from 'config/constants/types'\r\nimport useI18n from 'hooks/useI18n'\r\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\r\nimport FarmTabButtons from './components/FarmTabButtons'\r\nimport Divider from './components/Divider'\r\n\r\nexport interface FarmsProps {\r\n  tokenMode?: boolean\r\n}\r\n\r\nconst Farms: React.FC<FarmsProps> = (farmsProps) => {\r\n  const { path } = useRouteMatch()\r\n  const TranslateString = useI18n()\r\n  const farmsLP = useFarms()\r\n  const cakePrice = usePriceBlzdBusd()\r\n  const bnbPrice = usePriceBnbBusd()\r\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\r\n  const { tokenMode } = farmsProps\r\n\r\n  const dispatch = useDispatch()\r\n  const { fastRefresh } = useRefresh()\r\n  useEffect(() => {\r\n    if (account) {\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n    }\r\n  }, [account, dispatch, fastRefresh])\r\n\r\n  const activeFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier !== '0X')\r\n  const inactiveFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier === '0X')\r\n\r\n  // /!\\ This function will be removed soon\r\n  // This function compute the APY for each farm and will be replaced when we have a reliable API\r\n  // to retrieve assets prices against USD\r\n  const farmsList = useCallback(\r\n    (farmsToDisplay, removed: boolean) => {\r\n      // const cakePriceVsBNB = new BigNumber(farmsLP.find((farm) => farm.pid === CAKE_POOL_PID)?.tokenPriceVsQuote || 0)\r\n      const farmsToDisplayWithAPY: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\r\n        // if (!farm.tokenAmount || !farm.lpTotalInQuoteToken || !farm.lpTotalInQuoteToken) {\r\n        //   return farm\r\n        // }\r\n        const cakeRewardPerBlock = new BigNumber(farm.blzdPerBlock || 1)\r\n          .times(new BigNumber(farm.poolWeight))\r\n          .div(new BigNumber(10).pow(18))\r\n        const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\r\n\r\n        let apy = cakePrice.times(cakeRewardPerYear)\r\n\r\n        let totalValue = new BigNumber(farm.lpTotalInQuoteToken || 0)\r\n\r\n        if (farm.quoteTokenSymbol === QuoteToken.BNB) {\r\n          totalValue = totalValue.times(bnbPrice)\r\n        }\r\n\r\n        if (totalValue.comparedTo(0) > 0) {\r\n          apy = apy.div(totalValue)\r\n        }\r\n\r\n        return { ...farm, apy }\r\n      })\r\n      return farmsToDisplayWithAPY.map((farm) => (\r\n        <FarmCard\r\n          key={farm.pid}\r\n          farm={farm}\r\n          removed={removed}\r\n          bnbPrice={bnbPrice}\r\n          cakePrice={cakePrice}\r\n          ethereum={ethereum}\r\n          account={account}\r\n        />\r\n      ))\r\n    },\r\n    [bnbPrice, account, cakePrice, ethereum],\r\n  )\r\n\r\n  return (\r\n    <Page>\r\n      <Heading as=\"h1\" size=\"lg\" color=\"primary\" mb=\"50px\" style={{ textAlign: 'center' }}>\r\n        {tokenMode\r\n          ? TranslateString(10002, 'Stake tokens to earn BLZD')\r\n          : TranslateString(320, 'Stake LP tokens to earn BLZD')}\r\n      </Heading>\r\n      <FarmTabButtons />\r\n      <div>\r\n        <Divider />\r\n        <FlexLayout>\r\n          <Route exact path={`${path}`}>\r\n            {farmsList(activeFarms, false)}\r\n          </Route>\r\n          <Route exact path={`${path}/history`}>\r\n            {farmsList(inactiveFarms, true)}\r\n          </Route>\r\n        </FlexLayout>\r\n      </div>\r\n      <Image src=\"https://www.smurf.money/images/blzd/9.png\" alt=\"illustration\" width={1900} height={600} responsive />\r\n    </Page>\r\n  )\r\n}\r\n\r\nexport default Farms\r\n"],"sourceRoot":""}