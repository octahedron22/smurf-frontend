{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/frkul/Documents/smurf.money/blzd-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _defineProperty from\"C:/Users/frkul/Documents/smurf.money/blzd-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"C:/Users/frkul/Documents/smurf.money/blzd-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _asyncToGenerator from\"C:/Users/frkul/Documents/smurf.money/blzd-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";/* eslint-disable no-param-reassign */import{createAsyncThunk,createSlice}from'@reduxjs/toolkit';var initialState={isLoading:false,lastUpdated:null,data:null};// Thunks\nexport var fetchPrices=createAsyncThunk('prices/fetch',/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var response,data;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return fetch('https://api.pancakeswap.com/api/v1/price');case 2:response=_context.sent;_context.next=5;return response.json();case 5:data=_context.sent;return _context.abrupt(\"return\",{update_at:data.update_at,prices:Object.keys(data.prices).reduce(function(accum,token){return _objectSpread(_objectSpread({},accum),{},_defineProperty({},token.toLowerCase(),data.prices[token]));},{})});case 7:case\"end\":return _context.stop();}}},_callee);})));export var pricesSlice=createSlice({name:'prices',initialState:initialState,reducers:{},extraReducers:function extraReducers(builder){builder.addCase(fetchPrices.pending,function(state){state.isLoading=true;});builder.addCase(fetchPrices.fulfilled,function(state,action){state.isLoading=false;state.lastUpdated=action.payload.update_at;state.data=action.payload.prices;});}});export default pricesSlice.reducer;","map":{"version":3,"sources":["C:/Users/frkul/Documents/smurf.money/blzd-frontend/src/state/prices/index.ts"],"names":["createAsyncThunk","createSlice","initialState","isLoading","lastUpdated","data","fetchPrices","fetch","response","json","update_at","prices","Object","keys","reduce","accum","token","toLowerCase","pricesSlice","name","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","reducer"],"mappings":"kqBAAA,sCACA,OAASA,gBAAT,CAA2BC,WAA3B,KAA6D,kBAA7D,CAGA,GAAMC,CAAAA,YAAwB,CAAG,CAC/BC,SAAS,CAAE,KADoB,CAE/BC,WAAW,CAAE,IAFkB,CAG/BC,IAAI,CAAE,IAHyB,CAAjC,CAMA;AACA,MAAO,IAAMC,CAAAA,WAAW,CAAGN,gBAAgB,CAAmB,cAAnB,sEAAmC,2KACrDO,CAAAA,KAAK,CAAC,0CAAD,CADgD,QACtEC,QADsE,qCAExDA,CAAAA,QAAQ,CAACC,IAAT,EAFwD,QAEtEJ,IAFsE,+CAKrE,CACLK,SAAS,CAAEL,IAAI,CAACK,SADX,CAELC,MAAM,CAAEC,MAAM,CAACC,IAAP,CAAYR,IAAI,CAACM,MAAjB,EAAyBG,MAAzB,CAAgC,SAACC,KAAD,CAAQC,KAAR,CAAkB,CACxD,sCACKD,KADL,wBAEGC,KAAK,CAACC,WAAN,EAFH,CAEyBZ,IAAI,CAACM,MAAL,CAAYK,KAAZ,CAFzB,GAID,CALO,CAKL,EALK,CAFH,CALqE,wDAAnC,GAApC,CAgBP,MAAO,IAAME,CAAAA,WAAW,CAAGjB,WAAW,CAAC,CACrCkB,IAAI,CAAE,QAD+B,CAErCjB,YAAY,CAAZA,YAFqC,CAGrCkB,QAAQ,CAAE,EAH2B,CAIrCC,aAAa,CAAE,uBAACC,OAAD,CAAa,CAC1BA,OAAO,CAACC,OAAR,CAAgBjB,WAAW,CAACkB,OAA5B,CAAqC,SAACC,KAAD,CAAW,CAC9CA,KAAK,CAACtB,SAAN,CAAkB,IAAlB,CACD,CAFD,EAGAmB,OAAO,CAACC,OAAR,CAAgBjB,WAAW,CAACoB,SAA5B,CAAuC,SAACD,KAAD,CAAQE,MAAR,CAAoD,CACzFF,KAAK,CAACtB,SAAN,CAAkB,KAAlB,CACAsB,KAAK,CAACrB,WAAN,CAAoBuB,MAAM,CAACC,OAAP,CAAelB,SAAnC,CACAe,KAAK,CAACpB,IAAN,CAAasB,MAAM,CAACC,OAAP,CAAejB,MAA5B,CACD,CAJD,EAKD,CAboC,CAAD,CAA/B,CAgBP,cAAeO,CAAAA,WAAW,CAACW,OAA3B","sourcesContent":["/* eslint-disable no-param-reassign */\r\nimport { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'\r\nimport { PriceApiResponse, PriceState } from 'state/types'\r\n\r\nconst initialState: PriceState = {\r\n  isLoading: false,\r\n  lastUpdated: null,\r\n  data: null,\r\n}\r\n\r\n// Thunks\r\nexport const fetchPrices = createAsyncThunk<PriceApiResponse>('prices/fetch', async () => {\r\n  const response = await fetch('https://api.pancakeswap.com/api/v1/price')\r\n  const data = (await response.json()) as PriceApiResponse\r\n\r\n  // Return normalized token names\r\n  return {\r\n    update_at: data.update_at,\r\n    prices: Object.keys(data.prices).reduce((accum, token) => {\r\n      return {\r\n        ...accum,\r\n        [token.toLowerCase()]: data.prices[token],\r\n      }\r\n    }, {}),\r\n  }\r\n})\r\n\r\nexport const pricesSlice = createSlice({\r\n  name: 'prices',\r\n  initialState,\r\n  reducers: {},\r\n  extraReducers: (builder) => {\r\n    builder.addCase(fetchPrices.pending, (state) => {\r\n      state.isLoading = true\r\n    })\r\n    builder.addCase(fetchPrices.fulfilled, (state, action: PayloadAction<PriceApiResponse>) => {\r\n      state.isLoading = false\r\n      state.lastUpdated = action.payload.update_at\r\n      state.data = action.payload.prices\r\n    })\r\n  },\r\n})\r\n\r\nexport default pricesSlice.reducer\r\n"]},"metadata":{},"sourceType":"module"}