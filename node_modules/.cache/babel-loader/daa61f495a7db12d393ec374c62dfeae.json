{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/frkul/Documents/smurf.money/blzd-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _defineProperty from\"C:/Users/frkul/Documents/smurf.money/blzd-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"C:/Users/frkul/Documents/smurf.money/blzd-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _asyncToGenerator from\"C:/Users/frkul/Documents/smurf.money/blzd-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import poolsConfig from'config/constants/pools';import masterChefABI from'config/abi/masterchef.json';import sousChefABI from'config/abi/sousChef.json';import erc20ABI from'config/abi/erc20.json';import multicall from'utils/multicall';import{getAddress,getMasterChefAddress}from'utils/addressHelpers';import{getWeb3NoAccount}from'utils/web3';import BigNumber from'bignumber.js';// Pool 0, Cake / Cake is a different kind of contract (master chef)\n// BNB pools use the native BNB token (wrapping ? unwrapping is done at the contract level)\nvar nonBnbPools=poolsConfig.filter(function(p){return p.stakingToken.symbol!=='BNB';});var bnbPools=poolsConfig.filter(function(p){return p.stakingToken.symbol==='BNB';});var nonMasterPools=poolsConfig.filter(function(p){return p.sousId!==0;});var web3=getWeb3NoAccount();var masterChefContract=new web3.eth.Contract(masterChefABI,getMasterChefAddress());export var fetchPoolsAllowance=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(account){var calls,allowances;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:calls=nonBnbPools.map(function(p){return{address:getAddress(p.stakingToken.address),name:'allowance',params:[account,getAddress(p.contractAddress)]};});_context.next=3;return multicall(erc20ABI,calls);case 3:allowances=_context.sent;return _context.abrupt(\"return\",nonBnbPools.reduce(function(acc,pool,index){return _objectSpread(_objectSpread({},acc),{},_defineProperty({},pool.sousId,new BigNumber(allowances[index]).toJSON()));},{}));case 5:case\"end\":return _context.stop();}}},_callee);}));return function fetchPoolsAllowance(_x){return _ref.apply(this,arguments);};}();export var fetchUserBalances=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(account){var calls,tokenBalancesRaw,tokenBalances,bnbBalance,bnbBalances;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:// Non BNB pools\ncalls=nonBnbPools.map(function(p){return{address:getAddress(p.stakingToken.address),name:'balanceOf',params:[account]};});_context2.next=3;return multicall(erc20ABI,calls);case 3:tokenBalancesRaw=_context2.sent;tokenBalances=nonBnbPools.reduce(function(acc,pool,index){return _objectSpread(_objectSpread({},acc),{},_defineProperty({},pool.sousId,new BigNumber(tokenBalancesRaw[index]).toJSON()));},{});// BNB pools\n_context2.next=7;return web3.eth.getBalance(account);case 7:bnbBalance=_context2.sent;bnbBalances=bnbPools.reduce(function(acc,pool){return _objectSpread(_objectSpread({},acc),{},_defineProperty({},pool.sousId,new BigNumber(bnbBalance).toJSON()));},{});return _context2.abrupt(\"return\",_objectSpread(_objectSpread({},tokenBalances),bnbBalances));case 10:case\"end\":return _context2.stop();}}},_callee2);}));return function fetchUserBalances(_x2){return _ref2.apply(this,arguments);};}();export var fetchUserStakeBalances=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(account){var calls,userInfo,stakedBalances,_yield$masterChefCont,masterPoolAmount;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:calls=nonMasterPools.map(function(p){return{address:getAddress(p.contractAddress),name:'userInfo',params:[account]};});_context3.next=3;return multicall(sousChefABI,calls);case 3:userInfo=_context3.sent;stakedBalances=nonMasterPools.reduce(function(acc,pool,index){return _objectSpread(_objectSpread({},acc),{},_defineProperty({},pool.sousId,new BigNumber(userInfo[index].amount._hex).toJSON()));},{});// Cake / Cake pool\n_context3.next=7;return masterChefContract.methods.userInfo('0',account).call();case 7:_yield$masterChefCont=_context3.sent;masterPoolAmount=_yield$masterChefCont.amount;return _context3.abrupt(\"return\",_objectSpread(_objectSpread({},stakedBalances),{},{0:new BigNumber(masterPoolAmount).toJSON()}));case 10:case\"end\":return _context3.stop();}}},_callee3);}));return function fetchUserStakeBalances(_x3){return _ref3.apply(this,arguments);};}();export var fetchUserPendingRewards=/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(account){var calls,res,pendingRewards,pendingReward;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:calls=nonMasterPools.map(function(p){return{address:getAddress(p.contractAddress),name:'pendingReward',params:[account]};});_context4.next=3;return multicall(sousChefABI,calls);case 3:res=_context4.sent;pendingRewards=nonMasterPools.reduce(function(acc,pool,index){return _objectSpread(_objectSpread({},acc),{},_defineProperty({},pool.sousId,new BigNumber(res[index]).toJSON()));},{});// Cake / Cake pool\n_context4.next=7;return masterChefContract.methods.pendingBlzd('0',account).call();case 7:pendingReward=_context4.sent;return _context4.abrupt(\"return\",_objectSpread(_objectSpread({},pendingRewards),{},{0:new BigNumber(pendingReward).toJSON()}));case 9:case\"end\":return _context4.stop();}}},_callee4);}));return function fetchUserPendingRewards(_x4){return _ref4.apply(this,arguments);};}();","map":{"version":3,"sources":["C:/Users/frkul/Documents/smurf.money/blzd-frontend/src/state/pools/fetchPoolsUser.ts"],"names":["poolsConfig","masterChefABI","sousChefABI","erc20ABI","multicall","getAddress","getMasterChefAddress","getWeb3NoAccount","BigNumber","nonBnbPools","filter","p","stakingToken","symbol","bnbPools","nonMasterPools","sousId","web3","masterChefContract","eth","Contract","fetchPoolsAllowance","account","calls","map","address","name","params","contractAddress","allowances","reduce","acc","pool","index","toJSON","fetchUserBalances","tokenBalancesRaw","tokenBalances","getBalance","bnbBalance","bnbBalances","fetchUserStakeBalances","userInfo","stakedBalances","amount","_hex","methods","call","masterPoolAmount","fetchUserPendingRewards","res","pendingRewards","pendingBlzd","pendingReward"],"mappings":"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","sourcesContent":["import { AbiItem } from 'web3-utils'\r\nimport poolsConfig from 'config/constants/pools'\r\nimport masterChefABI from 'config/abi/masterchef.json'\r\nimport sousChefABI from 'config/abi/sousChef.json'\r\nimport erc20ABI from 'config/abi/erc20.json'\r\nimport multicall from 'utils/multicall'\r\nimport { getAddress, getMasterChefAddress } from 'utils/addressHelpers'\r\nimport { getWeb3NoAccount } from 'utils/web3'\r\nimport BigNumber from 'bignumber.js'\r\n\r\n// Pool 0, Cake / Cake is a different kind of contract (master chef)\r\n// BNB pools use the native BNB token (wrapping ? unwrapping is done at the contract level)\r\nconst nonBnbPools = poolsConfig.filter((p) => p.stakingToken.symbol !== 'BNB')\r\nconst bnbPools = poolsConfig.filter((p) => p.stakingToken.symbol === 'BNB')\r\nconst nonMasterPools = poolsConfig.filter((p) => p.sousId !== 0)\r\nconst web3 = getWeb3NoAccount()\r\nconst masterChefContract = new web3.eth.Contract((masterChefABI as unknown) as AbiItem, getMasterChefAddress())\r\n\r\nexport const fetchPoolsAllowance = async (account) => {\r\n  const calls = nonBnbPools.map((p) => ({\r\n    address: getAddress(p.stakingToken.address),\r\n    name: 'allowance',\r\n    params: [account, getAddress(p.contractAddress)],\r\n  }))\r\n\r\n  const allowances = await multicall(erc20ABI, calls)\r\n  return nonBnbPools.reduce(\r\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(allowances[index]).toJSON() }),\r\n    {},\r\n  )\r\n}\r\n\r\nexport const fetchUserBalances = async (account) => {\r\n  // Non BNB pools\r\n  const calls = nonBnbPools.map((p) => ({\r\n    address: getAddress(p.stakingToken.address),\r\n    name: 'balanceOf',\r\n    params: [account],\r\n  }))\r\n  const tokenBalancesRaw = await multicall(erc20ABI, calls)\r\n  const tokenBalances = nonBnbPools.reduce(\r\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(tokenBalancesRaw[index]).toJSON() }),\r\n    {},\r\n  )\r\n\r\n  // BNB pools\r\n  const bnbBalance = await web3.eth.getBalance(account)\r\n  const bnbBalances = bnbPools.reduce(\r\n    (acc, pool) => ({ ...acc, [pool.sousId]: new BigNumber(bnbBalance).toJSON() }),\r\n    {},\r\n  )\r\n\r\n  return { ...tokenBalances, ...bnbBalances }\r\n}\r\n\r\nexport const fetchUserStakeBalances = async (account) => {\r\n  const calls = nonMasterPools.map((p) => ({\r\n    address: getAddress(p.contractAddress),\r\n    name: 'userInfo',\r\n    params: [account],\r\n  }))\r\n  const userInfo = await multicall(sousChefABI, calls)\r\n  const stakedBalances = nonMasterPools.reduce(\r\n    (acc, pool, index) => ({\r\n      ...acc,\r\n      [pool.sousId]: new BigNumber(userInfo[index].amount._hex).toJSON(),\r\n    }),\r\n    {},\r\n  )\r\n\r\n  // Cake / Cake pool\r\n  const { amount: masterPoolAmount } = await masterChefContract.methods.userInfo('0', account).call()\r\n\r\n  return { ...stakedBalances, 0: new BigNumber(masterPoolAmount).toJSON() }\r\n}\r\n\r\nexport const fetchUserPendingRewards = async (account) => {\r\n  const calls = nonMasterPools.map((p) => ({\r\n    address: getAddress(p.contractAddress),\r\n    name: 'pendingReward',\r\n    params: [account],\r\n  }))\r\n  const res = await multicall(sousChefABI, calls)\r\n  const pendingRewards = nonMasterPools.reduce(\r\n    (acc, pool, index) => ({\r\n      ...acc,\r\n      [pool.sousId]: new BigNumber(res[index]).toJSON(),\r\n    }),\r\n    {},\r\n  )\r\n\r\n  // Cake / Cake pool\r\n  const pendingReward = await masterChefContract.methods.pendingBlzd('0', account).call()\r\n\r\n  return { ...pendingRewards, 0: new BigNumber(pendingReward).toJSON() }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}