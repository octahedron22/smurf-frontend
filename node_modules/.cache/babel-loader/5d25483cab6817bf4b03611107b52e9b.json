{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\frkul\\\\Documents\\\\smurf.money\\\\blzd-frontend\\\\src\\\\views\\\\Farms\\\\components\\\\FarmCard\\\\HarvestAction.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Button, Flex, Heading } from '@blzd-dev/uikit';\nimport useI18n from 'hooks/useI18n';\nimport { useHarvest } from 'hooks/useHarvest';\nimport { getBalanceNumber } from 'utils/formatBalance';\nimport styled from 'styled-components';\nimport useStake from '../../../../hooks/useStake';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BalanceAndCompound = styled.div`\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  > button {\n    width: 100%;\n  }\n`;\n_c = BalanceAndCompound;\n\nconst HarvestAction = ({\n  earnings,\n  pid\n}) => {\n  _s();\n\n  const TranslateString = useI18n();\n  const [pendingTx, setPendingTx] = useState(false);\n  const {\n    onReward\n  } = useHarvest(pid);\n  const {\n    onStake\n  } = useStake(pid);\n  const canCompound = pid === 0;\n  const rawEarningsBalance = getBalanceNumber(earnings);\n  const displayBalance = rawEarningsBalance.toLocaleString();\n  return /*#__PURE__*/_jsxDEV(Flex, {\n    mb: \"8px\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    children: [/*#__PURE__*/_jsxDEV(Heading, {\n      color: rawEarningsBalance === 0 ? 'textDisabled' : 'text',\n      children: displayBalance\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(BalanceAndCompound, {\n      children: [canCompound ? /*#__PURE__*/_jsxDEV(Button, {\n        disabled: rawEarningsBalance === 0 || pendingTx,\n        scale: \"sm\",\n        variant: \"secondary\",\n        marginBottom: \"8px\",\n        style: {\n          borderRadius: 12\n        },\n        onClick: async () => {\n          setPendingTx(true);\n          await onStake(rawEarningsBalance.toString());\n          setPendingTx(false);\n        },\n        children: TranslateString(999, 'Compound')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this) : null, /*#__PURE__*/_jsxDEV(Button, {\n        disabled: rawEarningsBalance === 0 || pendingTx,\n        scale: canCompound ? 'sm' : 'md',\n        style: {\n          borderRadius: !canCompound ? 16 : 12,\n          marginTop: !canCompound ? 8 : 0,\n          marginBottom: !canCompound ? 8 : 0\n        },\n        onClick: async () => {\n          setPendingTx(true);\n          await onReward();\n          setPendingTx(false);\n        },\n        children: TranslateString(999, 'Harvest')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n\n_s(HarvestAction, \"xbz64NzyfVJyA6YsfB8Be6WEnKA=\", false, function () {\n  return [useI18n, useHarvest, useStake];\n});\n\n_c2 = HarvestAction;\nexport default HarvestAction;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"BalanceAndCompound\");\n$RefreshReg$(_c2, \"HarvestAction\");","map":{"version":3,"sources":["C:/Users/frkul/Documents/smurf.money/blzd-frontend/src/views/Farms/components/FarmCard/HarvestAction.tsx"],"names":["React","useState","Button","Flex","Heading","useI18n","useHarvest","getBalanceNumber","styled","useStake","BalanceAndCompound","div","HarvestAction","earnings","pid","TranslateString","pendingTx","setPendingTx","onReward","onStake","canCompound","rawEarningsBalance","displayBalance","toLocaleString","borderRadius","toString","marginTop","marginBottom"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading } from '@blzd-dev/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useHarvest } from 'hooks/useHarvest'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport styled from 'styled-components'\r\nimport useStake from '../../../../hooks/useStake'\r\n\r\ninterface FarmCardActionsProps {\r\n  earnings?: BigNumber\r\n  pid?: number\r\n}\r\n\r\nconst BalanceAndCompound = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  > button {\r\n    width: 100%;\r\n  }\r\n`\r\n\r\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid }) => {\r\n  const TranslateString = useI18n()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { onReward } = useHarvest(pid)\r\n  const { onStake } = useStake(pid)\r\n\r\n  const canCompound = pid === 0\r\n\r\n  const rawEarningsBalance = getBalanceNumber(earnings)\r\n  const displayBalance = rawEarningsBalance.toLocaleString()\r\n\r\n  return (\r\n    <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Heading color={rawEarningsBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\r\n      <BalanceAndCompound>\r\n        {canCompound ? (\r\n          <Button\r\n            disabled={rawEarningsBalance === 0 || pendingTx}\r\n            scale=\"sm\"\r\n            variant=\"secondary\"\r\n            marginBottom=\"8px\"\r\n            style={{ borderRadius: 12 }}\r\n            onClick={async () => {\r\n              setPendingTx(true)\r\n              await onStake(rawEarningsBalance.toString())\r\n              setPendingTx(false)\r\n            }}\r\n          >\r\n            {TranslateString(999, 'Compound')}\r\n          </Button>\r\n        ) : null}\r\n        <Button\r\n          disabled={rawEarningsBalance === 0 || pendingTx}\r\n          scale={canCompound ? 'sm' : 'md'}\r\n          style={{\r\n            borderRadius: !canCompound ? 16 : 12,\r\n            marginTop: !canCompound ? 8 : 0,\r\n            marginBottom: !canCompound ? 8 : 0,\r\n          }}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onReward()\r\n            setPendingTx(false)\r\n          }}\r\n        >\r\n          {TranslateString(999, 'Harvest')}\r\n        </Button>\r\n      </BalanceAndCompound>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default HarvestAction\r\n"]},"metadata":{},"sourceType":"module"}