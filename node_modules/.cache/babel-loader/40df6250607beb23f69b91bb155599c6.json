{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$();\n\nimport { useCallback } from 'react';\nimport { useWallet } from '@binance-chain/bsc-use-wallet';\nimport { ethers } from 'ethers';\nimport { useDispatch } from 'react-redux';\nimport { updateUserAllowance, fetchFarmUserDataAsync } from 'state/actions';\nimport { approve } from 'utils/callHelpers';\nimport { getxBlzdAddress } from 'utils/addressHelpers';\nimport { useMasterchef, useCake, useSousChef, useLottery } from './useContract'; // Approve a Farm\n\nexport const useApprove = lpContract => {\n  _s();\n\n  const dispatch = useDispatch();\n  const {\n    account\n  } = useWallet();\n  const masterChefContract = useMasterchef();\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, masterChefContract, account);\n      dispatch(fetchFarmUserDataAsync(account));\n      return tx;\n    } catch (e) {\n      return false;\n    }\n  }, [account, dispatch, lpContract, masterChefContract]);\n  return {\n    onApprove: handleApprove\n  };\n}; // Approve a Pool\n\n_s(useApprove, \"912YkJ6AGYumCBnuye56mVxNDwo=\", false, function () {\n  return [useDispatch, useWallet, useMasterchef];\n});\n\nexport const useSousApprove = (lpContract, sousId) => {\n  _s2();\n\n  const dispatch = useDispatch();\n  const {\n    account\n  } = useWallet();\n  const sousChefContract = useSousChef(sousId);\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, sousChefContract, account);\n      dispatch(updateUserAllowance(sousId, account));\n      return tx;\n    } catch (e) {\n      return false;\n    }\n  }, [account, dispatch, lpContract, sousChefContract, sousId]);\n  return {\n    onApprove: handleApprove\n  };\n}; // Approve the lottery\n\n_s2(useSousApprove, \"ggN7BKqdJe4zaUSHEp+Mf3+jW2Q=\", false, function () {\n  return [useDispatch, useWallet, useSousChef];\n});\n\nexport const useLotteryApprove = () => {\n  _s3();\n\n  const {\n    account\n  } = useWallet();\n  const cakeContract = useCake();\n  const lotteryContract = useLottery();\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(cakeContract, lotteryContract, account);\n      return tx;\n    } catch (e) {\n      return false;\n    }\n  }, [account, cakeContract, lotteryContract]);\n  return {\n    onApprove: handleApprove\n  };\n}; // Approve an IFO\n\n_s3(useLotteryApprove, \"qmmDwizDBCPS/KQkbYFMkBrCi+A=\", false, function () {\n  return [useWallet, useCake, useLottery];\n});\n\nexport const useIfoApprove = (tokenContract, spenderAddress) => {\n  _s4();\n\n  const {\n    account\n  } = useWallet();\n  const onApprove = useCallback(async () => {\n    try {\n      const tx = await tokenContract.methods.approve(spenderAddress, ethers.constants.MaxUint256).send({\n        from: account\n      });\n      return tx;\n    } catch {\n      return false;\n    }\n  }, [account, spenderAddress, tokenContract]);\n  return onApprove;\n}; // Approve xBLZD\n\n_s4(useIfoApprove, \"5YEWPx3HiFEhK5UYbT6NzOlDPbw=\", false, function () {\n  return [useWallet];\n});\n\nexport const useXBlzdApprove = () => {\n  _s5();\n\n  const {\n    account\n  } = useWallet();\n  const cakeContract = useCake();\n  const onApprove = useCallback(async () => {\n    try {\n      const tx = await cakeContract.methods.approve(getxBlzdAddress(), ethers.constants.MaxUint256).send({\n        from: account\n      });\n      return tx;\n    } catch {\n      return false;\n    }\n  }, [account, cakeContract]);\n  return onApprove;\n};\n\n_s5(useXBlzdApprove, \"SDJtVORkOZThez+CC+q/B4gTBx0=\", false, function () {\n  return [useWallet, useCake];\n});","map":{"version":3,"sources":["C:/Dokumente/GitHub/smurf/SMURF-frontend/src/hooks/useApprove.ts"],"names":["useCallback","useWallet","ethers","useDispatch","updateUserAllowance","fetchFarmUserDataAsync","approve","getxBlzdAddress","useMasterchef","useCake","useSousChef","useLottery","useApprove","lpContract","dispatch","account","masterChefContract","handleApprove","tx","e","onApprove","useSousApprove","sousId","sousChefContract","useLotteryApprove","cakeContract","lotteryContract","useIfoApprove","tokenContract","spenderAddress","methods","constants","MaxUint256","send","from","useXBlzdApprove"],"mappings":"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","sourcesContent":["import { useCallback } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport { ethers } from 'ethers'\r\nimport { useDispatch } from 'react-redux'\r\nimport { updateUserAllowance, fetchFarmUserDataAsync } from 'state/actions'\r\nimport { approve } from 'utils/callHelpers'\r\nimport { getxBlzdAddress } from 'utils/addressHelpers'\r\nimport { useMasterchef, useCake, useSousChef, useLottery } from './useContract'\r\n\r\n\r\n// Approve a Farm\r\nexport const useApprove = (lpContract: Contract) => {\r\n  const dispatch = useDispatch()\r\n  const { account }: { account: string } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await approve(lpContract, masterChefContract, account)\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n      return tx\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [account, dispatch, lpContract, masterChefContract])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n\r\n// Approve a Pool\r\nexport const useSousApprove = (lpContract: Contract, sousId) => {\r\n  const dispatch = useDispatch()\r\n  const { account }: { account: string } = useWallet()\r\n  const sousChefContract = useSousChef(sousId)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await approve(lpContract, sousChefContract, account)\r\n      dispatch(updateUserAllowance(sousId, account))\r\n      return tx\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [account, dispatch, lpContract, sousChefContract, sousId])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n\r\n// Approve the lottery\r\nexport const useLotteryApprove = () => {\r\n  const { account }: { account: string } = useWallet()\r\n  const cakeContract = useCake()\r\n  const lotteryContract = useLottery()\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await approve(cakeContract, lotteryContract, account)\r\n      return tx\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [account, cakeContract, lotteryContract])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n\r\n// Approve an IFO\r\nexport const useIfoApprove = (tokenContract: Contract, spenderAddress: string) => {\r\n  const { account } = useWallet()\r\n  const onApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await tokenContract.methods\r\n        .approve(spenderAddress, ethers.constants.MaxUint256)\r\n        .send({ from: account })\r\n      return tx\r\n    } catch {\r\n      return false\r\n    }\r\n  }, [account, spenderAddress, tokenContract])\r\n\r\n  return onApprove\r\n}\r\n\r\n\r\n// Approve xBLZD\r\nexport const useXBlzdApprove = () => {\r\n  const { account } = useWallet()\r\n  const cakeContract = useCake()\r\n\r\n  const onApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await cakeContract.methods\r\n        .approve(getxBlzdAddress(), ethers.constants.MaxUint256)\r\n        .send({ from: account })\r\n      return tx\r\n    } catch {\r\n      return false\r\n    }\r\n  }, [account, cakeContract])\r\n\r\n  return onApprove\r\n}\r\n"]},"metadata":{},"sourceType":"module"}