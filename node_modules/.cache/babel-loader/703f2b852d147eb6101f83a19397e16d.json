{"ast":null,"code":"import poolsConfig from 'config/constants/pools';\nimport masterChefABI from 'config/abi/masterchef.json';\nimport sousChefABI from 'config/abi/sousChef.json';\nimport erc20ABI from 'config/abi/erc20.json';\nimport multicall from 'utils/multicall';\nimport { getAddress, getMasterChefAddress } from 'utils/addressHelpers';\nimport { getWeb3NoAccount } from 'utils/web3';\nimport BigNumber from 'bignumber.js'; // Pool 0, Cake / Cake is a different kind of contract (master chef)\n// BNB pools use the native BNB token (wrapping ? unwrapping is done at the contract level)\n\nconst nonBnbPools = poolsConfig.filter(p => p.stakingToken.symbol !== 'BNB');\nconst bnbPools = poolsConfig.filter(p => p.stakingToken.symbol === 'BNB');\nconst nonMasterPools = poolsConfig.filter(p => p.sousId !== 0);\nconst web3 = getWeb3NoAccount();\nconst masterChefContract = new web3.eth.Contract(masterChefABI, getMasterChefAddress());\nexport const fetchPoolsAllowance = async account => {\n  const calls = nonBnbPools.map(p => ({\n    address: getAddress(p.stakingToken.address),\n    name: 'allowance',\n    params: [account, getAddress(p.contractAddress)]\n  }));\n  const allowances = await multicall(erc20ABI, calls);\n  return nonBnbPools.reduce((acc, pool, index) => ({ ...acc,\n    [pool.sousId]: new BigNumber(allowances[index]).toJSON()\n  }), {});\n};\nexport const fetchUserBalances = async account => {\n  // Non BNB pools\n  const calls = nonBnbPools.map(p => ({\n    address: getAddress(p.stakingToken.address),\n    name: 'balanceOf',\n    params: [account]\n  }));\n  const tokenBalancesRaw = await multicall(erc20ABI, calls);\n  const tokenBalances = nonBnbPools.reduce((acc, pool, index) => ({ ...acc,\n    [pool.sousId]: new BigNumber(tokenBalancesRaw[index]).toJSON()\n  }), {}); // BNB pools\n\n  const bnbBalance = await web3.eth.getBalance(account);\n  const bnbBalances = bnbPools.reduce((acc, pool) => ({ ...acc,\n    [pool.sousId]: new BigNumber(bnbBalance).toJSON()\n  }), {});\n  return { ...tokenBalances,\n    ...bnbBalances\n  };\n};\nexport const fetchUserStakeBalances = async account => {\n  const calls = nonMasterPools.map(p => ({\n    address: getAddress(p.contractAddress),\n    name: 'userInfo',\n    params: [account]\n  }));\n  const userInfo = await multicall(sousChefABI, calls);\n  const stakedBalances = nonMasterPools.reduce((acc, pool, index) => ({ ...acc,\n    [pool.sousId]: new BigNumber(userInfo[index].amount._hex).toJSON()\n  }), {}); // Cake / Cake pool\n\n  const {\n    amount: masterPoolAmount\n  } = await masterChefContract.methods.userInfo('0', account).call();\n  return { ...stakedBalances,\n    0: new BigNumber(masterPoolAmount).toJSON()\n  };\n};\nexport const fetchUserPendingRewards = async account => {\n  const calls = nonMasterPools.map(p => ({\n    address: getAddress(p.contractAddress),\n    name: 'pendingReward',\n    params: [account]\n  }));\n  const res = await multicall(sousChefABI, calls);\n  const pendingRewards = nonMasterPools.reduce((acc, pool, index) => ({ ...acc,\n    [pool.sousId]: new BigNumber(res[index]).toJSON()\n  }), {}); // Cake / Cake pool\n\n  const pendingReward = await masterChefContract.methods.pendingBlzd('0', account).call();\n  return { ...pendingRewards,\n    0: new BigNumber(pendingReward).toJSON()\n  };\n};","map":{"version":3,"sources":["C:/Dokumente/GitHub/smurf/SMURF-frontend/src/state/pools/fetchPoolsUser.ts"],"names":["poolsConfig","masterChefABI","sousChefABI","erc20ABI","multicall","getAddress","getMasterChefAddress","getWeb3NoAccount","BigNumber","nonBnbPools","filter","p","stakingToken","symbol","bnbPools","nonMasterPools","sousId","web3","masterChefContract","eth","Contract","fetchPoolsAllowance","account","calls","map","address","name","params","contractAddress","allowances","reduce","acc","pool","index","toJSON","fetchUserBalances","tokenBalancesRaw","tokenBalances","bnbBalance","getBalance","bnbBalances","fetchUserStakeBalances","userInfo","stakedBalances","amount","_hex","masterPoolAmount","methods","call","fetchUserPendingRewards","res","pendingRewards","pendingReward","pendingBlzd"],"mappings":"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","sourcesContent":["import { AbiItem } from 'web3-utils'\r\nimport poolsConfig from 'config/constants/pools'\r\nimport masterChefABI from 'config/abi/masterchef.json'\r\nimport sousChefABI from 'config/abi/sousChef.json'\r\nimport erc20ABI from 'config/abi/erc20.json'\r\nimport multicall from 'utils/multicall'\r\nimport { getAddress, getMasterChefAddress } from 'utils/addressHelpers'\r\nimport { getWeb3NoAccount } from 'utils/web3'\r\nimport BigNumber from 'bignumber.js'\r\n\r\n// Pool 0, Cake / Cake is a different kind of contract (master chef)\r\n// BNB pools use the native BNB token (wrapping ? unwrapping is done at the contract level)\r\nconst nonBnbPools = poolsConfig.filter((p) => p.stakingToken.symbol !== 'BNB')\r\nconst bnbPools = poolsConfig.filter((p) => p.stakingToken.symbol === 'BNB')\r\nconst nonMasterPools = poolsConfig.filter((p) => p.sousId !== 0)\r\nconst web3 = getWeb3NoAccount()\r\nconst masterChefContract = new web3.eth.Contract((masterChefABI as unknown) as AbiItem, getMasterChefAddress())\r\n\r\nexport const fetchPoolsAllowance = async (account) => {\r\n  const calls = nonBnbPools.map((p) => ({\r\n    address: getAddress(p.stakingToken.address),\r\n    name: 'allowance',\r\n    params: [account, getAddress(p.contractAddress)],\r\n  }))\r\n\r\n  const allowances = await multicall(erc20ABI, calls)\r\n  return nonBnbPools.reduce(\r\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(allowances[index]).toJSON() }),\r\n    {},\r\n  )\r\n}\r\n\r\nexport const fetchUserBalances = async (account) => {\r\n  // Non BNB pools\r\n  const calls = nonBnbPools.map((p) => ({\r\n    address: getAddress(p.stakingToken.address),\r\n    name: 'balanceOf',\r\n    params: [account],\r\n  }))\r\n  const tokenBalancesRaw = await multicall(erc20ABI, calls)\r\n  const tokenBalances = nonBnbPools.reduce(\r\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(tokenBalancesRaw[index]).toJSON() }),\r\n    {},\r\n  )\r\n\r\n  // BNB pools\r\n  const bnbBalance = await web3.eth.getBalance(account)\r\n  const bnbBalances = bnbPools.reduce(\r\n    (acc, pool) => ({ ...acc, [pool.sousId]: new BigNumber(bnbBalance).toJSON() }),\r\n    {},\r\n  )\r\n\r\n  return { ...tokenBalances, ...bnbBalances }\r\n}\r\n\r\nexport const fetchUserStakeBalances = async (account) => {\r\n  const calls = nonMasterPools.map((p) => ({\r\n    address: getAddress(p.contractAddress),\r\n    name: 'userInfo',\r\n    params: [account],\r\n  }))\r\n  const userInfo = await multicall(sousChefABI, calls)\r\n  const stakedBalances = nonMasterPools.reduce(\r\n    (acc, pool, index) => ({\r\n      ...acc,\r\n      [pool.sousId]: new BigNumber(userInfo[index].amount._hex).toJSON(),\r\n    }),\r\n    {},\r\n  )\r\n\r\n  // Cake / Cake pool\r\n  const { amount: masterPoolAmount } = await masterChefContract.methods.userInfo('0', account).call()\r\n\r\n  return { ...stakedBalances, 0: new BigNumber(masterPoolAmount).toJSON() }\r\n}\r\n\r\nexport const fetchUserPendingRewards = async (account) => {\r\n  const calls = nonMasterPools.map((p) => ({\r\n    address: getAddress(p.contractAddress),\r\n    name: 'pendingReward',\r\n    params: [account],\r\n  }))\r\n  const res = await multicall(sousChefABI, calls)\r\n  const pendingRewards = nonMasterPools.reduce(\r\n    (acc, pool, index) => ({\r\n      ...acc,\r\n      [pool.sousId]: new BigNumber(res[index]).toJSON(),\r\n    }),\r\n    {},\r\n  )\r\n\r\n  // Cake / Cake pool\r\n  const pendingReward = await masterChefContract.methods.pendingBlzd('0', account).call()\r\n\r\n  return { ...pendingRewards, 0: new BigNumber(pendingReward).toJSON() }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}