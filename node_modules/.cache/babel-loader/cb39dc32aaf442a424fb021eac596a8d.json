{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/frkul/Documents/smurf.money/blzd-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"C:/Users/frkul/Documents/smurf.money/blzd-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"C:/Users/frkul/Documents/smurf.money/blzd-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useEffect,useState}from'react';import BigNumber from'bignumber.js';import{useWallet}from'@binance-chain/bsc-use-wallet';import cakeABI from'config/abi/cake.json';import{getContract}from'utils/web3';import{getTokenBalance}from'utils/erc20';import{getCakeAddress}from'utils/addressHelpers';import useRefresh from'./useRefresh';var useTokenBalance=function useTokenBalance(tokenAddress){var _useState=useState(new BigNumber(0)),_useState2=_slicedToArray(_useState,2),balance=_useState2[0],setBalance=_useState2[1];var _useWallet=useWallet(),account=_useWallet.account,ethereum=_useWallet.ethereum;var _useRefresh=useRefresh(),fastRefresh=_useRefresh.fastRefresh;useEffect(function(){var fetchBalance=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var res;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return getTokenBalance(ethereum,tokenAddress,account);case 2:res=_context.sent;setBalance(new BigNumber(res));case 4:case\"end\":return _context.stop();}}},_callee);}));return function fetchBalance(){return _ref.apply(this,arguments);};}();if(account&&ethereum){fetchBalance();}},[account,ethereum,tokenAddress,fastRefresh]);return balance;};export var useTotalSupply=function useTotalSupply(){var _useRefresh2=useRefresh(),slowRefresh=_useRefresh2.slowRefresh;var _useState3=useState(),_useState4=_slicedToArray(_useState3,2),totalSupply=_useState4[0],setTotalSupply=_useState4[1];useEffect(function(){function fetchTotalSupply(){return _fetchTotalSupply.apply(this,arguments);}function _fetchTotalSupply(){_fetchTotalSupply=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var cakeContract,supply;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:cakeContract=getContract(cakeABI,getCakeAddress());_context2.next=3;return cakeContract.methods.totalSupply().call();case 3:supply=_context2.sent;setTotalSupply(new BigNumber(supply));case 5:case\"end\":return _context2.stop();}}},_callee2);}));return _fetchTotalSupply.apply(this,arguments);}fetchTotalSupply();},[slowRefresh]);return totalSupply;};export var useBurnedBalance=function useBurnedBalance(tokenAddress){var _useState5=useState(new BigNumber(0)),_useState6=_slicedToArray(_useState5,2),balance=_useState6[0],setBalance=_useState6[1];var _useRefresh3=useRefresh(),slowRefresh=_useRefresh3.slowRefresh;useEffect(function(){var fetchBalance=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(){var cakeContract,bal;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:cakeContract=getContract(cakeABI,getCakeAddress());_context3.next=3;return cakeContract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call();case 3:bal=_context3.sent;setBalance(new BigNumber(bal));case 5:case\"end\":return _context3.stop();}}},_callee3);}));return function fetchBalance(){return _ref2.apply(this,arguments);};}();fetchBalance();},[tokenAddress,slowRefresh]);return balance;};export default useTokenBalance;","map":{"version":3,"sources":["C:/Users/frkul/Documents/smurf.money/blzd-frontend/src/hooks/useTokenBalance.ts"],"names":["useEffect","useState","BigNumber","useWallet","cakeABI","getContract","getTokenBalance","getCakeAddress","useRefresh","useTokenBalance","tokenAddress","balance","setBalance","account","ethereum","fastRefresh","fetchBalance","res","useTotalSupply","slowRefresh","totalSupply","setTotalSupply","fetchTotalSupply","cakeContract","methods","call","supply","useBurnedBalance","balanceOf","bal"],"mappings":"wfAAA,OAASA,SAAT,CAAoBC,QAApB,KAAoC,OAApC,CACA,MAAOC,CAAAA,SAAP,KAAsB,cAAtB,CACA,OAASC,SAAT,KAA0B,+BAA1B,CAEA,MAAOC,CAAAA,OAAP,KAAoB,sBAApB,CACA,OAASC,WAAT,KAA4B,YAA5B,CACA,OAASC,eAAT,KAAgC,aAAhC,CACA,OAASC,cAAT,KAA+B,sBAA/B,CACA,MAAOC,CAAAA,UAAP,KAAuB,cAAvB,CAEA,GAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAACC,YAAD,CAA0B,eAClBT,QAAQ,CAAC,GAAIC,CAAAA,SAAJ,CAAc,CAAd,CAAD,CADU,wCACzCS,OADyC,eAChCC,UADgC,8BAEuBT,SAAS,EAFhC,CAExCU,OAFwC,YAExCA,OAFwC,CAE/BC,QAF+B,YAE/BA,QAF+B,iBAGxBN,UAAU,EAHc,CAGxCO,WAHwC,aAGxCA,WAHwC,CAKhDf,SAAS,CAAC,UAAM,CACd,GAAMgB,CAAAA,YAAY,0FAAG,iKACDV,CAAAA,eAAe,CAACQ,QAAD,CAAWJ,YAAX,CAAyBG,OAAzB,CADd,QACbI,GADa,eAEnBL,UAAU,CAAC,GAAIV,CAAAA,SAAJ,CAAce,GAAd,CAAD,CAAV,CAFmB,sDAAH,kBAAZD,CAAAA,YAAY,0CAAlB,CAKA,GAAIH,OAAO,EAAIC,QAAf,CAAyB,CACvBE,YAAY,GACb,CACF,CATQ,CASN,CAACH,OAAD,CAAUC,QAAV,CAAoBJ,YAApB,CAAkCK,WAAlC,CATM,CAAT,CAWA,MAAOJ,CAAAA,OAAP,CACD,CAjBD,CAmBA,MAAO,IAAMO,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,EAAM,kBACVV,UAAU,EADA,CAC1BW,WAD0B,cAC1BA,WAD0B,gBAEIlB,QAAQ,EAFZ,yCAE3BmB,WAF2B,eAEdC,cAFc,eAIlCrB,SAAS,CAAC,UAAM,SACCsB,CAAAA,gBADD,0JACd,gKACQC,YADR,CACuBlB,WAAW,CAACD,OAAD,CAAUG,cAAc,EAAxB,CADlC,wBAEuBgB,CAAAA,YAAY,CAACC,OAAb,CAAqBJ,WAArB,GAAmCK,IAAnC,EAFvB,QAEQC,MAFR,gBAGEL,cAAc,CAAC,GAAInB,CAAAA,SAAJ,CAAcwB,MAAd,CAAD,CAAd,CAHF,wDADc,mDAOdJ,gBAAgB,GACjB,CARQ,CAQN,CAACH,WAAD,CARM,CAAT,CAUA,MAAOC,CAAAA,WAAP,CACD,CAfM,CAiBP,MAAO,IAAMO,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACjB,YAAD,CAA0B,gBAC1BT,QAAQ,CAAC,GAAIC,CAAAA,SAAJ,CAAc,CAAd,CAAD,CADkB,yCACjDS,OADiD,eACxCC,UADwC,gCAEhCJ,UAAU,EAFsB,CAEhDW,WAFgD,cAEhDA,WAFgD,CAIxDnB,SAAS,CAAC,UAAM,CACd,GAAMgB,CAAAA,YAAY,2FAAG,6JACbO,YADa,CACElB,WAAW,CAACD,OAAD,CAAUG,cAAc,EAAxB,CADb,wBAEDgB,CAAAA,YAAY,CAACC,OAAb,CAAqBI,SAArB,CAA+B,4CAA/B,EAA6EH,IAA7E,EAFC,QAEbI,GAFa,gBAGnBjB,UAAU,CAAC,GAAIV,CAAAA,SAAJ,CAAc2B,GAAd,CAAD,CAAV,CAHmB,wDAAH,kBAAZb,CAAAA,YAAY,2CAAlB,CAMAA,YAAY,GACb,CARQ,CAQN,CAACN,YAAD,CAAeS,WAAf,CARM,CAAT,CAUA,MAAOR,CAAAA,OAAP,CACD,CAfM,CAiBP,cAAeF,CAAAA,eAAf","sourcesContent":["import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { provider } from 'web3-core'\r\nimport cakeABI from 'config/abi/cake.json'\r\nimport { getContract } from 'utils/web3'\r\nimport { getTokenBalance } from 'utils/erc20'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport useRefresh from './useRefresh'\r\n\r\nconst useTokenBalance = (tokenAddress: string) => {\r\n  const [balance, setBalance] = useState(new BigNumber(0))\r\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const res = await getTokenBalance(ethereum, tokenAddress, account)\r\n      setBalance(new BigNumber(res))\r\n    }\r\n\r\n    if (account && ethereum) {\r\n      fetchBalance()\r\n    }\r\n  }, [account, ethereum, tokenAddress, fastRefresh])\r\n\r\n  return balance\r\n}\r\n\r\nexport const useTotalSupply = () => {\r\n  const { slowRefresh } = useRefresh()\r\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\r\n\r\n  useEffect(() => {\r\n    async function fetchTotalSupply() {\r\n      const cakeContract = getContract(cakeABI, getCakeAddress())\r\n      const supply = await cakeContract.methods.totalSupply().call()\r\n      setTotalSupply(new BigNumber(supply))\r\n    }\r\n\r\n    fetchTotalSupply()\r\n  }, [slowRefresh])\r\n\r\n  return totalSupply\r\n}\r\n\r\nexport const useBurnedBalance = (tokenAddress: string) => {\r\n  const [balance, setBalance] = useState(new BigNumber(0))\r\n  const { slowRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const cakeContract = getContract(cakeABI, getCakeAddress())\r\n      const bal = await cakeContract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\r\n      setBalance(new BigNumber(bal))\r\n    }\r\n\r\n    fetchBalance()\r\n  }, [tokenAddress, slowRefresh])\r\n\r\n  return balance\r\n}\r\n\r\nexport default useTokenBalance\r\n"]},"metadata":{},"sourceType":"module"}