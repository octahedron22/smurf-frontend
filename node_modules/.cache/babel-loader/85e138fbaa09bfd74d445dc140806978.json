{"ast":null,"code":"import Web3 from'web3';import getRpcUrl from'utils/getRpcUrl';var RPC_URL=getRpcUrl();var httpProvider=new Web3.providers.HttpProvider(RPC_URL,{timeout:10000});var web3NoAccount=new Web3(httpProvider);/**\r\n * Provides a web3 instance using our own private provider httpProver\r\n */var getWeb3=function getWeb3(){var web3=new Web3(httpProvider);return web3;};var getContract=function getContract(abi,address,contractOptions){var web3=getWeb3();return new web3.eth.Contract(abi,address,contractOptions);};var getWeb3NoAccount=function getWeb3NoAccount(){return web3NoAccount;};export{getWeb3NoAccount};export{getWeb3,getContract,httpProvider};export default web3NoAccount;","map":{"version":3,"sources":["C:/Dokumente/GitHub/smurf/SMURF-frontend/src/utils/web3.ts"],"names":["Web3","getRpcUrl","RPC_URL","httpProvider","providers","HttpProvider","timeout","web3NoAccount","getWeb3","web3","getContract","abi","address","contractOptions","eth","Contract","getWeb3NoAccount"],"mappings":"AAAA,MAAOA,CAAAA,IAAP,KAAiB,MAAjB,CAIA,MAAOC,CAAAA,SAAP,KAAsB,iBAAtB,CAEA,GAAMC,CAAAA,OAAO,CAAGD,SAAS,EAAzB,CACA,GAAME,CAAAA,YAAY,CAAG,GAAIH,CAAAA,IAAI,CAACI,SAAL,CAAeC,YAAnB,CAAgCH,OAAhC,CAAyC,CAAEI,OAAO,CAAE,KAAX,CAAzC,CAArB,CACA,GAAMC,CAAAA,aAAa,CAAG,GAAIP,CAAAA,IAAJ,CAASG,YAAT,CAAtB,CAEA;AACA;AACA,GACA,GAAMK,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,EAAM,CACpB,GAAMC,CAAAA,IAAI,CAAG,GAAIT,CAAAA,IAAJ,CAASG,YAAT,CAAb,CACA,MAAOM,CAAAA,IAAP,CACD,CAHD,CAIA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,GAAD,CAAWC,OAAX,CAA4BC,eAA5B,CAAkE,CACpF,GAAMJ,CAAAA,IAAI,CAAGD,OAAO,EAApB,CACA,MAAO,IAAIC,CAAAA,IAAI,CAACK,GAAL,CAASC,QAAb,CAAuBJ,GAAvB,CAAmDC,OAAnD,CAA4DC,eAA5D,CAAP,CACD,CAHD,CAKA,GAAMG,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,EAAM,CAC7B,MAAOT,CAAAA,aAAP,CACD,CAFD,CAIA,OAASS,gBAAT,EACA,OAASR,OAAT,CAAkBE,WAAlB,CAA+BP,YAA/B,EACA,cAAeI,CAAAA,aAAf","sourcesContent":["import Web3 from 'web3'\r\nimport { HttpProviderOptions } from 'web3-core-helpers'\r\nimport { AbiItem } from 'web3-utils'\r\nimport { ContractOptions } from 'web3-eth-contract'\r\nimport getRpcUrl from 'utils/getRpcUrl'\r\n\r\nconst RPC_URL = getRpcUrl()\r\nconst httpProvider = new Web3.providers.HttpProvider(RPC_URL, { timeout: 10000 } as HttpProviderOptions)\r\nconst web3NoAccount = new Web3(httpProvider)\r\n\r\n/**\r\n * Provides a web3 instance using our own private provider httpProver\r\n */\r\nconst getWeb3 = () => {\r\n  const web3 = new Web3(httpProvider)\r\n  return web3\r\n}\r\nconst getContract = (abi: any, address: string, contractOptions?: ContractOptions) => {\r\n  const web3 = getWeb3()\r\n  return new web3.eth.Contract((abi as unknown) as AbiItem, address, contractOptions)\r\n}\r\n\r\nconst getWeb3NoAccount = () => {\r\n  return web3NoAccount\r\n}\r\n\r\nexport { getWeb3NoAccount }\r\nexport { getWeb3, getContract, httpProvider }\r\nexport default web3NoAccount\r\n"]},"metadata":{},"sourceType":"module"}