{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/frkul/Documents/smurf.money/blzd-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"C:/Users/frkul/Documents/smurf.money/blzd-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{useCallback}from'react';import{useWallet}from'@binance-chain/bsc-use-wallet';import{useDispatch}from'react-redux';import{fetchFarmUserDataAsync}from'state/actions';import{exchangeXBlzd}from'utils/callHelpers';import{useXBlzd}from'./useContract';var useExchangeXBlzd=function useExchangeXBlzd(){var dispatch=useDispatch();var _useWallet=useWallet(),account=_useWallet.account;var xBlzdContract=useXBlzd();var handleExchange=useCallback(/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(amount){var txHash;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return exchangeXBlzd(xBlzdContract,amount,account);case 2:txHash=_context.sent;dispatch(fetchFarmUserDataAsync(account));console.info(txHash);case 5:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}(),[account,dispatch,xBlzdContract]);return{onExchange:handleExchange};};export default useExchangeXBlzd;","map":{"version":3,"sources":["C:/Users/frkul/Documents/smurf.money/blzd-frontend/src/hooks/useExchangeXBlzd.ts"],"names":["useCallback","useWallet","useDispatch","fetchFarmUserDataAsync","exchangeXBlzd","useXBlzd","useExchangeXBlzd","dispatch","account","xBlzdContract","handleExchange","amount","txHash","console","info","onExchange"],"mappings":"+UAAA,OAASA,WAAT,KAA4B,OAA5B,CACA,OAASC,SAAT,KAA0B,+BAA1B,CACA,OAASC,WAAT,KAA4B,aAA5B,CACA,OAASC,sBAAT,KAAuC,eAAvC,CACA,OAASC,aAAT,KAA8B,mBAA9B,CACA,OAASC,QAAT,KAAyB,eAAzB,CAEA,GAAMC,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,EAAM,CAC7B,GAAMC,CAAAA,QAAQ,CAAGL,WAAW,EAA5B,CAD6B,eAETD,SAAS,EAFA,CAErBO,OAFqB,YAErBA,OAFqB,CAG7B,GAAMC,CAAAA,aAAa,CAAGJ,QAAQ,EAA9B,CAEA,GAAMK,CAAAA,cAAc,CAAGV,WAAW,0FAChC,iBAAOW,MAAP,mJACuBP,CAAAA,aAAa,CAACK,aAAD,CAAgBE,MAAhB,CAAwBH,OAAxB,CADpC,QACQI,MADR,eAEEL,QAAQ,CAACJ,sBAAsB,CAACK,OAAD,CAAvB,CAAR,CACAK,OAAO,CAACC,IAAR,CAAaF,MAAb,EAHF,sDADgC,+DAMhC,CAACJ,OAAD,CAAUD,QAAV,CAAoBE,aAApB,CANgC,CAAlC,CASA,MAAO,CAAEM,UAAU,CAAEL,cAAd,CAAP,CACD,CAfD,CAgBA,cAAeJ,CAAAA,gBAAf","sourcesContent":["import { useCallback } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { useDispatch } from 'react-redux'\r\nimport { fetchFarmUserDataAsync } from 'state/actions'\r\nimport { exchangeXBlzd } from 'utils/callHelpers'\r\nimport { useXBlzd } from './useContract'\r\n\r\nconst useExchangeXBlzd = () => {\r\n  const dispatch = useDispatch()\r\n  const { account } = useWallet()\r\n  const xBlzdContract = useXBlzd()\r\n\r\n  const handleExchange = useCallback(\r\n    async (amount: string) => {\r\n      const txHash = await exchangeXBlzd(xBlzdContract, amount, account)\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n      console.info(txHash)\r\n    },\r\n    [account, dispatch, xBlzdContract],\r\n  )\r\n\r\n  return { onExchange: handleExchange }\r\n}\r\nexport default useExchangeXBlzd\r\n"]},"metadata":{},"sourceType":"module"}