{"ast":null,"code":"import _slicedToArray from\"C:/Users/frkul/Documents/smurf.money/blzd-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React from'react';// import styled from 'styled-components'\nimport{Button,Flex,Heading,useModal}from'@blzd-dev/uikit';// import useI18n from 'hooks/useI18n'\n// import useStake from 'hooks/useStake'\nimport useUnstake from'hooks/useUnstake';import{getBalanceNumber}from'utils/formatBalance';// import DepositModal from '../DepositModal'\nimport WithdrawModal from'../WithdrawModal';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";// const IconButtonWrapper = styled.div`\n//   display: flex;\n//   svg {\n//     width: 20px;\n//   }\n// `\nvar StakeAction=function StakeAction(_ref){var stakedBalance=_ref.stakedBalance,tokenName=_ref.tokenName,pid=_ref.pid;// const TranslateString = useI18n()\n// const { onStake } = useStake(pid)\nvar _useUnstake=useUnstake(pid),onUnstake=_useUnstake.onUnstake;var rawStakedBalance=getBalanceNumber(stakedBalance);var displayBalance=rawStakedBalance.toLocaleString();// const [onPresentDeposit] = useModal(\n//   <DepositModal max={tokenBalance} onConfirm={onStake} tokenName={tokenName} depositFeeBP={depositFeeBP} />,\n// )\nvar _useModal=useModal(/*#__PURE__*/_jsx(WithdrawModal,{max:stakedBalance,onConfirm:onUnstake,tokenName:tokenName})),_useModal2=_slicedToArray(_useModal,1),onPresentWithdraw=_useModal2[0];// const renderStakingButtons = () => {\n//   return rawStakedBalance === 0 ? (\n//     <Button style={{ width: 107.72 }} onClick={onPresentDeposit}>\n//       {TranslateString(999, 'Stake')}\n//     </Button>\n//   ) : (\n//     <IconButtonWrapper>\n//       <IconButton style={{ width: 52 }} variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\n//         <MinusIcon color=\"primary\" />\n//       </IconButton>\n//       <IconButton style={{ width: 52 }} variant=\"tertiary\" onClick={onPresentDeposit}>\n//         <AddIcon color=\"primary\" />\n//       </IconButton>\n//     </IconButtonWrapper>\n//   )\n// }\nvar renderUnstakingButtons=function renderUnstakingButtons(){return/*#__PURE__*/_jsx(Button,{style:{width:107.72},onClick:onPresentWithdraw,children:\"Unstake\"});};return/*#__PURE__*/_jsxs(Flex,{justifyContent:\"space-between\",alignItems:\"center\",children:[/*#__PURE__*/_jsx(Heading,{color:rawStakedBalance===0?'textDisabled':'text',children:displayBalance}),renderUnstakingButtons()]});};export default StakeAction;","map":{"version":3,"sources":["C:/Users/frkul/Documents/smurf.money/blzd-frontend/src/views/Farms/components/FarmCard/StakeAction.tsx"],"names":["React","Button","Flex","Heading","useModal","useUnstake","getBalanceNumber","WithdrawModal","StakeAction","stakedBalance","tokenName","pid","onUnstake","rawStakedBalance","displayBalance","toLocaleString","onPresentWithdraw","renderUnstakingButtons","width"],"mappings":"yKAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA;AAEA,OAASC,MAAT,CAAiBC,IAAjB,CAAuBC,OAAvB,CAAgCC,QAAhC,KAAgD,iBAAhD,CACA;AACA;AACA,MAAOC,CAAAA,UAAP,KAAuB,kBAAvB,CACA,OAASC,gBAAT,KAAiC,qBAAjC,CACA;AACA,MAAOC,CAAAA,aAAP,KAA0B,kBAA1B,C,wFAUA;AACA;AACA;AACA;AACA;AACA;AAEA,GAAMC,CAAAA,WAA2C,CAAG,QAA9CA,CAAAA,WAA8C,MAAuC,IAApCC,CAAAA,aAAoC,MAApCA,aAAoC,CAArBC,SAAqB,MAArBA,SAAqB,CAAVC,GAAU,MAAVA,GAAU,CACzF;AACA;AAFyF,gBAGnEN,UAAU,CAACM,GAAD,CAHyD,CAGjFC,SAHiF,aAGjFA,SAHiF,CAKzF,GAAMC,CAAAA,gBAAgB,CAAGP,gBAAgB,CAACG,aAAD,CAAzC,CACA,GAAMK,CAAAA,cAAc,CAAGD,gBAAgB,CAACE,cAAjB,EAAvB,CAEA;AACA;AACA;AAVyF,cAW7DX,QAAQ,cAClC,KAAC,aAAD,EAAe,GAAG,CAAEK,aAApB,CAAmC,SAAS,CAAEG,SAA9C,CAAyD,SAAS,CAAEF,SAApE,EADkC,CAXqD,wCAWlFM,iBAXkF,eAezF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,GAAMC,CAAAA,sBAAsB,CAAG,QAAzBA,CAAAA,sBAAyB,EAAM,CACnC,mBACE,KAAC,MAAD,EAAQ,KAAK,CAAE,CAAEC,KAAK,CAAE,MAAT,CAAf,CAAkC,OAAO,CAAEF,iBAA3C,qBADF,CAKD,CAND,CAQA,mBACE,MAAC,IAAD,EAAM,cAAc,CAAC,eAArB,CAAqC,UAAU,CAAC,QAAhD,wBACE,KAAC,OAAD,EAAS,KAAK,CAAEH,gBAAgB,GAAK,CAArB,CAAyB,cAAzB,CAA0C,MAA1D,UAAmEC,cAAnE,EADF,CAEGG,sBAAsB,EAFzB,GADF,CAMD,CA9CD,CAgDA,cAAeT,CAAAA,WAAf","sourcesContent":["import React from 'react'\r\n// import styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading, useModal } from '@blzd-dev/uikit'\r\n// import useI18n from 'hooks/useI18n'\r\n// import useStake from 'hooks/useStake'\r\nimport useUnstake from 'hooks/useUnstake'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\n// import DepositModal from '../DepositModal'\r\nimport WithdrawModal from '../WithdrawModal'\r\n\r\ninterface FarmCardActionsProps {\r\n  stakedBalance?: BigNumber\r\n  tokenBalance?: BigNumber\r\n  tokenName?: string\r\n  pid?: number\r\n  depositFeeBP?: number\r\n}\r\n\r\n// const IconButtonWrapper = styled.div`\r\n//   display: flex;\r\n//   svg {\r\n//     width: 20px;\r\n//   }\r\n// `\r\n\r\nconst StakeAction: React.FC<FarmCardActionsProps> = ({ stakedBalance, tokenName, pid }) => {\r\n  // const TranslateString = useI18n()\r\n  // const { onStake } = useStake(pid)\r\n  const { onUnstake } = useUnstake(pid)\r\n\r\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\r\n  const displayBalance = rawStakedBalance.toLocaleString()\r\n\r\n  // const [onPresentDeposit] = useModal(\r\n  //   <DepositModal max={tokenBalance} onConfirm={onStake} tokenName={tokenName} depositFeeBP={depositFeeBP} />,\r\n  // )\r\n  const [onPresentWithdraw] = useModal(\r\n    <WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={tokenName} />,\r\n  )\r\n\r\n  // const renderStakingButtons = () => {\r\n  //   return rawStakedBalance === 0 ? (\r\n  //     <Button style={{ width: 107.72 }} onClick={onPresentDeposit}>\r\n  //       {TranslateString(999, 'Stake')}\r\n  //     </Button>\r\n  //   ) : (\r\n  //     <IconButtonWrapper>\r\n  //       <IconButton style={{ width: 52 }} variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\r\n  //         <MinusIcon color=\"primary\" />\r\n  //       </IconButton>\r\n  //       <IconButton style={{ width: 52 }} variant=\"tertiary\" onClick={onPresentDeposit}>\r\n  //         <AddIcon color=\"primary\" />\r\n  //       </IconButton>\r\n  //     </IconButtonWrapper>\r\n  //   )\r\n  // }\r\n\r\n  const renderUnstakingButtons = () => {\r\n    return (\r\n      <Button style={{ width: 107.72 }} onClick={onPresentWithdraw}>\r\n        Unstake\r\n      </Button>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Heading color={rawStakedBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\r\n      {renderUnstakingButtons()}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default StakeAction\r\n"]},"metadata":{},"sourceType":"module"}