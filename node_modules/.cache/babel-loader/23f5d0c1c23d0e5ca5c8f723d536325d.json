{"ast":null,"code":"import BigNumber from'bignumber.js';import{BLOCKS_PER_YEAR,CAKE_PER_BLOCK}from'config';/**\r\n * Get the APY value in %\r\n * @param stakingTokenPrice Token price in the same quote currency\r\n * @param rewardTokenPrice Token price in the same quote currency\r\n * @param totalStaked Total amount of stakingToken in the pool\r\n * @param tokenPerBlock Amount of new cake allocated to the pool for each new block\r\n * @returns Null if the APY is NaN or infinite.\r\n */export var getPoolApy=function getPoolApy(stakingTokenPrice,rewardTokenPrice,totalStaked,tokenPerBlock){var totalRewardPricePerYear=new BigNumber(rewardTokenPrice).times(tokenPerBlock).times(BLOCKS_PER_YEAR);var totalStakingTokenInPool=new BigNumber(stakingTokenPrice).times(totalStaked);var apy=totalRewardPricePerYear.div(totalStakingTokenInPool).times(100);return apy.isNaN()||!apy.isFinite()?null:apy.toNumber();};/**\r\n * Get farm APY value in %\r\n * @param poolWeight allocationPoint / totalAllocationPoint\r\n * @param cakePriceUsd Cake price in USD\r\n * @param poolLiquidityUsd Total pool liquidity in USD\r\n * @returns\r\n */export var getFarmApy=function getFarmApy(poolWeight,cakePriceUsd,poolLiquidityUsd){var yearlyCakeRewardAllocation=CAKE_PER_BLOCK.times(BLOCKS_PER_YEAR).times(poolWeight);var apy=yearlyCakeRewardAllocation.times(cakePriceUsd).div(poolLiquidityUsd).times(100);return apy.isNaN()||!apy.isFinite()?null:apy.toNumber();};export default null;","map":{"version":3,"sources":["C:/Dokumente/GitHub/smurf/SMURF-frontend/src/utils/apy.ts"],"names":["BigNumber","BLOCKS_PER_YEAR","CAKE_PER_BLOCK","getPoolApy","stakingTokenPrice","rewardTokenPrice","totalStaked","tokenPerBlock","totalRewardPricePerYear","times","totalStakingTokenInPool","apy","div","isNaN","isFinite","toNumber","getFarmApy","poolWeight","cakePriceUsd","poolLiquidityUsd","yearlyCakeRewardAllocation"],"mappings":"AAAA,MAAOA,CAAAA,SAAP,KAAsB,cAAtB,CACA,OAASC,eAAT,CAA0BC,cAA1B,KAAgD,QAAhD,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,IAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CACxBC,iBADwB,CAExBC,gBAFwB,CAGxBC,WAHwB,CAIxBC,aAJwB,CAKb,CACX,GAAMC,CAAAA,uBAAuB,CAAG,GAAIR,CAAAA,SAAJ,CAAcK,gBAAd,EAAgCI,KAAhC,CAAsCF,aAAtC,EAAqDE,KAArD,CAA2DR,eAA3D,CAAhC,CACA,GAAMS,CAAAA,uBAAuB,CAAG,GAAIV,CAAAA,SAAJ,CAAcI,iBAAd,EAAiCK,KAAjC,CAAuCH,WAAvC,CAAhC,CACA,GAAMK,CAAAA,GAAG,CAAGH,uBAAuB,CAACI,GAAxB,CAA4BF,uBAA5B,EAAqDD,KAArD,CAA2D,GAA3D,CAAZ,CACA,MAAOE,CAAAA,GAAG,CAACE,KAAJ,IAAe,CAACF,GAAG,CAACG,QAAJ,EAAhB,CAAiC,IAAjC,CAAwCH,GAAG,CAACI,QAAJ,EAA/C,CACD,CAVM,CAYP;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,IAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACC,UAAD,CAAwBC,YAAxB,CAAiDC,gBAAjD,CAAyF,CACjH,GAAMC,CAAAA,0BAA0B,CAAGlB,cAAc,CAACO,KAAf,CAAqBR,eAArB,EAAsCQ,KAAtC,CAA4CQ,UAA5C,CAAnC,CACA,GAAMN,CAAAA,GAAG,CAAGS,0BAA0B,CAACX,KAA3B,CAAiCS,YAAjC,EAA+CN,GAA/C,CAAmDO,gBAAnD,EAAqEV,KAArE,CAA2E,GAA3E,CAAZ,CACA,MAAOE,CAAAA,GAAG,CAACE,KAAJ,IAAe,CAACF,GAAG,CAACG,QAAJ,EAAhB,CAAiC,IAAjC,CAAwCH,GAAG,CAACI,QAAJ,EAA/C,CACD,CAJM,CAMP,cAAe,KAAf","sourcesContent":["import BigNumber from 'bignumber.js'\r\nimport { BLOCKS_PER_YEAR, CAKE_PER_BLOCK } from 'config'\r\n\r\n/**\r\n * Get the APY value in %\r\n * @param stakingTokenPrice Token price in the same quote currency\r\n * @param rewardTokenPrice Token price in the same quote currency\r\n * @param totalStaked Total amount of stakingToken in the pool\r\n * @param tokenPerBlock Amount of new cake allocated to the pool for each new block\r\n * @returns Null if the APY is NaN or infinite.\r\n */\r\nexport const getPoolApy = (\r\n  stakingTokenPrice: number,\r\n  rewardTokenPrice: number,\r\n  totalStaked: number,\r\n  tokenPerBlock: number,\r\n): number => {\r\n  const totalRewardPricePerYear = new BigNumber(rewardTokenPrice).times(tokenPerBlock).times(BLOCKS_PER_YEAR)\r\n  const totalStakingTokenInPool = new BigNumber(stakingTokenPrice).times(totalStaked)\r\n  const apy = totalRewardPricePerYear.div(totalStakingTokenInPool).times(100)\r\n  return apy.isNaN() || !apy.isFinite() ? null : apy.toNumber()\r\n}\r\n\r\n/**\r\n * Get farm APY value in %\r\n * @param poolWeight allocationPoint / totalAllocationPoint\r\n * @param cakePriceUsd Cake price in USD\r\n * @param poolLiquidityUsd Total pool liquidity in USD\r\n * @returns\r\n */\r\nexport const getFarmApy = (poolWeight: BigNumber, cakePriceUsd: BigNumber, poolLiquidityUsd: BigNumber): number => {\r\n  const yearlyCakeRewardAllocation = CAKE_PER_BLOCK.times(BLOCKS_PER_YEAR).times(poolWeight)\r\n  const apy = yearlyCakeRewardAllocation.times(cakePriceUsd).div(poolLiquidityUsd).times(100)\r\n  return apy.isNaN() || !apy.isFinite() ? null : apy.toNumber()\r\n}\r\n\r\nexport default null\r\n"]},"metadata":{},"sourceType":"module"}