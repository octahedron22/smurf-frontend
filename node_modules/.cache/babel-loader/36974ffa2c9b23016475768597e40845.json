{"ast":null,"code":"import BigNumber from 'bignumber.js';\nimport { BLOCKS_PER_YEAR, CAKE_PER_BLOCK } from 'config';\n/**\r\n * Get the APY value in %\r\n * @param stakingTokenPrice Token price in the same quote currency\r\n * @param rewardTokenPrice Token price in the same quote currency\r\n * @param totalStaked Total amount of stakingToken in the pool\r\n * @param tokenPerBlock Amount of new cake allocated to the pool for each new block\r\n * @returns Null if the APY is NaN or infinite.\r\n */\n\nexport const getPoolApy = (stakingTokenPrice, rewardTokenPrice, totalStaked, tokenPerBlock) => {\n  const totalRewardPricePerYear = new BigNumber(rewardTokenPrice).times(tokenPerBlock).times(BLOCKS_PER_YEAR);\n  const totalStakingTokenInPool = new BigNumber(stakingTokenPrice).times(totalStaked);\n  const apy = totalRewardPricePerYear.div(totalStakingTokenInPool).times(100);\n  return apy.isNaN() || !apy.isFinite() ? null : apy.toNumber();\n};\n/**\r\n * Get farm APY value in %\r\n * @param poolWeight allocationPoint / totalAllocationPoint\r\n * @param cakePriceUsd Cake price in USD\r\n * @param poolLiquidityUsd Total pool liquidity in USD\r\n * @returns\r\n */\n\nexport const getFarmApy = (poolWeight, cakePriceUsd, poolLiquidityUsd) => {\n  const yearlyCakeRewardAllocation = CAKE_PER_BLOCK.times(BLOCKS_PER_YEAR).times(poolWeight);\n  const apy = yearlyCakeRewardAllocation.times(cakePriceUsd).div(poolLiquidityUsd).times(100);\n  return apy.isNaN() || !apy.isFinite() ? null : apy.toNumber();\n};\nexport default null;","map":{"version":3,"sources":["C:/Dokumente/GitHub/smurf/SMURF-frontend/src/utils/apy.ts"],"names":["BigNumber","BLOCKS_PER_YEAR","CAKE_PER_BLOCK","getPoolApy","stakingTokenPrice","rewardTokenPrice","totalStaked","tokenPerBlock","totalRewardPricePerYear","times","totalStakingTokenInPool","apy","div","isNaN","isFinite","toNumber","getFarmApy","poolWeight","cakePriceUsd","poolLiquidityUsd","yearlyCakeRewardAllocation"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,cAAtB;AACA,SAASC,eAAT,EAA0BC,cAA1B,QAAgD,QAAhD;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,UAAU,GAAG,CACxBC,iBADwB,EAExBC,gBAFwB,EAGxBC,WAHwB,EAIxBC,aAJwB,KAKb;AACX,QAAMC,uBAAuB,GAAG,IAAIR,SAAJ,CAAcK,gBAAd,EAAgCI,KAAhC,CAAsCF,aAAtC,EAAqDE,KAArD,CAA2DR,eAA3D,CAAhC;AACA,QAAMS,uBAAuB,GAAG,IAAIV,SAAJ,CAAcI,iBAAd,EAAiCK,KAAjC,CAAuCH,WAAvC,CAAhC;AACA,QAAMK,GAAG,GAAGH,uBAAuB,CAACI,GAAxB,CAA4BF,uBAA5B,EAAqDD,KAArD,CAA2D,GAA3D,CAAZ;AACA,SAAOE,GAAG,CAACE,KAAJ,MAAe,CAACF,GAAG,CAACG,QAAJ,EAAhB,GAAiC,IAAjC,GAAwCH,GAAG,CAACI,QAAJ,EAA/C;AACD,CAVM;AAYP;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,UAAU,GAAG,CAACC,UAAD,EAAwBC,YAAxB,EAAiDC,gBAAjD,KAAyF;AACjH,QAAMC,0BAA0B,GAAGlB,cAAc,CAACO,KAAf,CAAqBR,eAArB,EAAsCQ,KAAtC,CAA4CQ,UAA5C,CAAnC;AACA,QAAMN,GAAG,GAAGS,0BAA0B,CAACX,KAA3B,CAAiCS,YAAjC,EAA+CN,GAA/C,CAAmDO,gBAAnD,EAAqEV,KAArE,CAA2E,GAA3E,CAAZ;AACA,SAAOE,GAAG,CAACE,KAAJ,MAAe,CAACF,GAAG,CAACG,QAAJ,EAAhB,GAAiC,IAAjC,GAAwCH,GAAG,CAACI,QAAJ,EAA/C;AACD,CAJM;AAMP,eAAe,IAAf","sourcesContent":["import BigNumber from 'bignumber.js'\r\nimport { BLOCKS_PER_YEAR, CAKE_PER_BLOCK } from 'config'\r\n\r\n/**\r\n * Get the APY value in %\r\n * @param stakingTokenPrice Token price in the same quote currency\r\n * @param rewardTokenPrice Token price in the same quote currency\r\n * @param totalStaked Total amount of stakingToken in the pool\r\n * @param tokenPerBlock Amount of new cake allocated to the pool for each new block\r\n * @returns Null if the APY is NaN or infinite.\r\n */\r\nexport const getPoolApy = (\r\n  stakingTokenPrice: number,\r\n  rewardTokenPrice: number,\r\n  totalStaked: number,\r\n  tokenPerBlock: number,\r\n): number => {\r\n  const totalRewardPricePerYear = new BigNumber(rewardTokenPrice).times(tokenPerBlock).times(BLOCKS_PER_YEAR)\r\n  const totalStakingTokenInPool = new BigNumber(stakingTokenPrice).times(totalStaked)\r\n  const apy = totalRewardPricePerYear.div(totalStakingTokenInPool).times(100)\r\n  return apy.isNaN() || !apy.isFinite() ? null : apy.toNumber()\r\n}\r\n\r\n/**\r\n * Get farm APY value in %\r\n * @param poolWeight allocationPoint / totalAllocationPoint\r\n * @param cakePriceUsd Cake price in USD\r\n * @param poolLiquidityUsd Total pool liquidity in USD\r\n * @returns\r\n */\r\nexport const getFarmApy = (poolWeight: BigNumber, cakePriceUsd: BigNumber, poolLiquidityUsd: BigNumber): number => {\r\n  const yearlyCakeRewardAllocation = CAKE_PER_BLOCK.times(BLOCKS_PER_YEAR).times(poolWeight)\r\n  const apy = yearlyCakeRewardAllocation.times(cakePriceUsd).div(poolLiquidityUsd).times(100)\r\n  return apy.isNaN() || !apy.isFinite() ? null : apy.toNumber()\r\n}\r\n\r\nexport default null\r\n"]},"metadata":{},"sourceType":"module"}