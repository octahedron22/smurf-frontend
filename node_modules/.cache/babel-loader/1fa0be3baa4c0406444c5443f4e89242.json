{"ast":null,"code":"import _regeneratorRuntime from\"C:/Dokumente/GitHub/smurf/SMURF-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"C:/Dokumente/GitHub/smurf/SMURF-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"C:/Dokumente/GitHub/smurf/SMURF-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useEffect,useState}from'react';import{useWallet}from'@binance-chain/bsc-use-wallet';import multicall from'utils/multicall';import{getMasterChefAddress}from'utils/addressHelpers';import masterChefABI from'config/abi/masterchef.json';import{farmsConfig}from'config/constants';import useRefresh from'./useRefresh';var useAllEarnings=function useAllEarnings(){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),balances=_useState2[0],setBalance=_useState2[1];var _useWallet=useWallet(),account=_useWallet.account;var _useRefresh=useRefresh(),fastRefresh=_useRefresh.fastRefresh;useEffect(function(){var fetchAllBalances=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var calls,res;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:calls=farmsConfig.map(function(farm){return{address:getMasterChefAddress(),name:'pendingBlzd',params:[farm.pid,account]};});_context.next=3;return multicall(masterChefABI,calls);case 3:res=_context.sent;setBalance(res);case 5:case\"end\":return _context.stop();}}},_callee);}));return function fetchAllBalances(){return _ref.apply(this,arguments);};}();if(account){fetchAllBalances();}},[account,fastRefresh]);return balances;};export default useAllEarnings;","map":{"version":3,"sources":["C:/Dokumente/GitHub/smurf/SMURF-frontend/src/hooks/useAllEarnings.ts"],"names":["useEffect","useState","useWallet","multicall","getMasterChefAddress","masterChefABI","farmsConfig","useRefresh","useAllEarnings","balances","setBalance","account","fastRefresh","fetchAllBalances","calls","map","farm","address","name","params","pid","res"],"mappings":"0dAAA,OAASA,SAAT,CAAoBC,QAApB,KAAoC,OAApC,CACA,OAASC,SAAT,KAA0B,+BAA1B,CACA,MAAOC,CAAAA,SAAP,KAAsB,iBAAtB,CACA,OAASC,oBAAT,KAAqC,sBAArC,CACA,MAAOC,CAAAA,aAAP,KAA0B,4BAA1B,CACA,OAASC,WAAT,KAA4B,kBAA5B,CACA,MAAOC,CAAAA,UAAP,KAAuB,cAAvB,CAEA,GAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,EAAM,eACIP,QAAQ,CAAC,EAAD,CADZ,wCACpBQ,QADoB,eACVC,UADU,8BAEcR,SAAS,EAFvB,CAEnBS,OAFmB,YAEnBA,OAFmB,iBAGHJ,UAAU,EAHP,CAGnBK,WAHmB,aAGnBA,WAHmB,CAK3BZ,SAAS,CAAC,UAAM,CACd,GAAMa,CAAAA,gBAAgB,0FAAG,iJACjBC,KADiB,CACTR,WAAW,CAACS,GAAZ,CAAgB,SAACC,IAAD,QAAW,CACvCC,OAAO,CAAEb,oBAAoB,EADU,CAEvCc,IAAI,CAAE,aAFiC,CAGvCC,MAAM,CAAE,CAACH,IAAI,CAACI,GAAN,CAAWT,OAAX,CAH+B,CAAX,EAAhB,CADS,uBAOLR,CAAAA,SAAS,CAACE,aAAD,CAAgBS,KAAhB,CAPJ,QAOjBO,GAPiB,eASvBX,UAAU,CAACW,GAAD,CAAV,CATuB,sDAAH,kBAAhBR,CAAAA,gBAAgB,0CAAtB,CAYA,GAAIF,OAAJ,CAAa,CACXE,gBAAgB,GACjB,CACF,CAhBQ,CAgBN,CAACF,OAAD,CAAUC,WAAV,CAhBM,CAAT,CAkBA,MAAOH,CAAAA,QAAP,CACD,CAxBD,CA0BA,cAAeD,CAAAA,cAAf","sourcesContent":["import { useEffect, useState } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\nimport masterChefABI from 'config/abi/masterchef.json'\r\nimport { farmsConfig } from 'config/constants'\r\nimport useRefresh from './useRefresh'\r\n\r\nconst useAllEarnings = () => {\r\n  const [balances, setBalance] = useState([])\r\n  const { account }: { account: string } = useWallet()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchAllBalances = async () => {\r\n      const calls = farmsConfig.map((farm) => ({\r\n        address: getMasterChefAddress(),\r\n        name: 'pendingBlzd',\r\n        params: [farm.pid, account],\r\n      }))\r\n\r\n      const res = await multicall(masterChefABI, calls)\r\n\r\n      setBalance(res)\r\n    }\r\n\r\n    if (account) {\r\n      fetchAllBalances()\r\n    }\r\n  }, [account, fastRefresh])\r\n\r\n  return balances\r\n}\r\n\r\nexport default useAllEarnings\r\n"]},"metadata":{},"sourceType":"module"}