{"ast":null,"code":"import _regeneratorRuntime from\"C:/Dokumente/GitHub/smurf/SMURF-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"C:/Dokumente/GitHub/smurf/SMURF-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"C:/Dokumente/GitHub/smurf/SMURF-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _taggedTemplateLiteral from\"C:/Dokumente/GitHub/smurf/SMURF-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";var _templateObject,_templateObject2,_templateObject3,_templateObject4,_templateObject5,_templateObject6;import React,{useState,useCallback}from'react';import styled from'styled-components';import{Heading,Card,CardBody,Button}from'@blzd-dev/uikit';import{useWallet}from'@binance-chain/bsc-use-wallet';import useI18n from'hooks/useI18n';import{useAllHarvest}from'hooks/useHarvest';import useFarmsWithBalance from'hooks/useFarmsWithBalance';import UnlockButton from'components/UnlockButton';import BlzdHarvestBalance from'./BlzdHarvestBalance';import BlzdWalletBalance from'./BlzdWalletBalance';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var StyledFarmStakingCard=styled(Card)(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  background-image: url('https://raw.githubusercontent.com/octahedron22/smurf-frontend/master/public/images/smurf/2a.png');\\n  background-size: 256px;\\n  background-repeat: no-repeat;\\n  background-position: top right;\\n  min-height: 376px;\\n\"])));var Block=styled.div(_templateObject2||(_templateObject2=_taggedTemplateLiteral([\"\\n  margin-bottom: 16px;\\n\"])));var TokenImageWrapper=styled.div(_templateObject3||(_templateObject3=_taggedTemplateLiteral([\"\\n  display: flex;\\n  align-items: center;\\n  margin-bottom: 16px;\\n\"])));var CardImage=styled.img(_templateObject4||(_templateObject4=_taggedTemplateLiteral([\"\\n  margin-right: 8px;\\n\"])));var Label=styled.div(_templateObject5||(_templateObject5=_taggedTemplateLiteral([\"\\n  color: \",\";\\n  font-size: 14px;\\n\"])),function(_ref){var theme=_ref.theme;return theme.colors.textSubtle;});var Actions=styled.div(_templateObject6||(_templateObject6=_taggedTemplateLiteral([\"\\n  margin-top: 24px;\\n\"])));var FarmedStakingCard=function FarmedStakingCard(){var _useState=useState(false),_useState2=_slicedToArray(_useState,2),pendingTx=_useState2[0],setPendingTx=_useState2[1];var _useWallet=useWallet(),account=_useWallet.account;var TranslateString=useI18n();var farmsWithBalance=useFarmsWithBalance();var balancesWithValue=farmsWithBalance.filter(function(balanceType){return balanceType.balance.toNumber()>0;});var _useAllHarvest=useAllHarvest(balancesWithValue.map(function(farmWithBalance){return farmWithBalance.pid;})),onReward=_useAllHarvest.onReward;var harvestAllFarms=useCallback(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:setPendingTx(true);_context.prev=1;_context.next=4;return onReward();case 4:_context.next=8;break;case 6:_context.prev=6;_context.t0=_context[\"catch\"](1);case 8:_context.prev=8;setPendingTx(false);return _context.finish(8);case 11:case\"end\":return _context.stop();}}},_callee,null,[[1,6,8,11]]);})),[onReward]);var addWatchBlzdToken=useCallback(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var provider,wasAdded;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nprovider=window.ethereum;if(!provider){_context2.next=11;break;}_context2.prev=2;_context2.next=5;return provider.request({method:'wallet_watchAsset',params:{type:'ERC20',options:{address:'0x0812EEBCd567a26b53B34900dC412Fe7Fc8e557c',symbol:'SMURF',decimals:'18',image:'https://raw.githubusercontent.com/octahedron22/smurf-frontend/master/public/images/farms/smurf.png'}}});case 5:wasAdded=_context2.sent;if(wasAdded){console.log('Token was added');}_context2.next=11;break;case 9:_context2.prev=9;_context2.t0=_context2[\"catch\"](2);case 11:case\"end\":return _context2.stop();}}},_callee2,null,[[2,9]]);})),[]);return/*#__PURE__*/_jsx(StyledFarmStakingCard,{children:/*#__PURE__*/_jsxs(CardBody,{children:[/*#__PURE__*/_jsx(Heading,{size:\"xl\",mb:\"24px\",children:TranslateString(542,'Farms & Staking')}),/*#__PURE__*/_jsxs(TokenImageWrapper,{children:[/*#__PURE__*/_jsx(CardImage,{src:\"https://raw.githubusercontent.com/octahedron22/smurf-frontend/master/public/images/smurf/2.png\",alt:\"smurf logo\",width:64,height:64}),/*#__PURE__*/_jsxs(Button,{onClick:addWatchBlzdToken,scale:\"sm\",children:[\"+\",' ',/*#__PURE__*/_jsx(\"img\",{style:{marginLeft:8},width:16,src:\"https://raw.githubusercontent.com/octahedron22/smurf-frontend/master/public/images/wallet/metamask.png\",alt:\"metamask logo\"})]})]}),/*#__PURE__*/_jsxs(Block,{children:[/*#__PURE__*/_jsx(BlzdHarvestBalance,{}),/*#__PURE__*/_jsx(Label,{children:TranslateString(544,'BLZD to Harvest')})]}),/*#__PURE__*/_jsxs(Block,{children:[/*#__PURE__*/_jsx(BlzdWalletBalance,{}),/*#__PURE__*/_jsx(Label,{children:TranslateString(546,'BLZD in Wallet')})]}),/*#__PURE__*/_jsx(Actions,{children:account?/*#__PURE__*/_jsx(Button,{id:\"harvest-all\",disabled:balancesWithValue.length<=0||pendingTx,onClick:harvestAllFarms,children:pendingTx?TranslateString(548,'Collecting BLZD'):TranslateString(999,\"Harvest all (\".concat(balancesWithValue.length,\")\"))}):/*#__PURE__*/_jsx(UnlockButton,{fullWidth:true})})]})});};export default FarmedStakingCard;","map":{"version":3,"sources":["C:/Dokumente/GitHub/smurf/SMURF-frontend/src/views/Home/components/FarmStakingCard.tsx"],"names":["React","useState","useCallback","styled","Heading","Card","CardBody","Button","useWallet","useI18n","useAllHarvest","useFarmsWithBalance","UnlockButton","BlzdHarvestBalance","BlzdWalletBalance","StyledFarmStakingCard","Block","div","TokenImageWrapper","CardImage","img","Label","theme","colors","textSubtle","Actions","FarmedStakingCard","pendingTx","setPendingTx","account","TranslateString","farmsWithBalance","balancesWithValue","filter","balanceType","balance","toNumber","map","farmWithBalance","pid","onReward","harvestAllFarms","addWatchBlzdToken","provider","window","ethereum","request","method","params","type","options","address","symbol","decimals","image","wasAdded","console","log","marginLeft","length"],"mappings":"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","sourcesContent":["import React, { useState, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Card, CardBody, Button } from '@blzd-dev/uikit'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useAllHarvest } from 'hooks/useHarvest'\r\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport BlzdHarvestBalance from './BlzdHarvestBalance'\r\nimport BlzdWalletBalance from './BlzdWalletBalance'\r\n\r\nconst StyledFarmStakingCard = styled(Card)`\r\n  background-image: url('https://raw.githubusercontent.com/octahedron22/smurf-frontend/master/public/images/smurf/2a.png');\r\n  background-size: 256px;\r\n  background-repeat: no-repeat;\r\n  background-position: top right;\r\n  min-height: 376px;\r\n`\r\n\r\nconst Block = styled.div`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst TokenImageWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst CardImage = styled.img`\r\n  margin-right: 8px;\r\n`\r\n\r\nconst Label = styled.div`\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n  font-size: 14px;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  margin-top: 24px;\r\n`\r\n\r\nconst FarmedStakingCard = () => {\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { account } = useWallet()\r\n  const TranslateString = useI18n()\r\n  const farmsWithBalance = useFarmsWithBalance()\r\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.toNumber() > 0)\r\n\r\n  const { onReward } = useAllHarvest(balancesWithValue.map((farmWithBalance) => farmWithBalance.pid))\r\n\r\n  const harvestAllFarms = useCallback(async () => {\r\n    setPendingTx(true)\r\n    try {\r\n      await onReward()\r\n    } catch (error) {\r\n      // TODO: find a way to handle when the user rejects transaction or it fails\r\n    } finally {\r\n      setPendingTx(false)\r\n    }\r\n  }, [onReward])\r\n\r\n  const addWatchBlzdToken = useCallback(async () => {\r\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n    // @ts-ignore\r\n    const provider = window.ethereum\r\n    if (provider) {\r\n      try {\r\n        // wasAdded is a boolean. Like any RPC method, an error may be thrown.\r\n        const wasAdded = await provider.request({\r\n          method: 'wallet_watchAsset',\r\n          params: {\r\n            type: 'ERC20',\r\n            options: {\r\n              address: '0x0812EEBCd567a26b53B34900dC412Fe7Fc8e557c',\r\n              symbol: 'SMURF',\r\n              decimals: '18',\r\n              image:\r\n                'https://raw.githubusercontent.com/octahedron22/smurf-frontend/master/public/images/farms/smurf.png',\r\n            },\r\n          },\r\n        })\r\n\r\n        if (wasAdded) {\r\n          console.log('Token was added')\r\n        }\r\n      } catch (error) {\r\n        // TODO: find a way to handle when the user rejects transaction or it fails\r\n      }\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <StyledFarmStakingCard>\r\n      <CardBody>\r\n        <Heading size=\"xl\" mb=\"24px\">\r\n          {TranslateString(542, 'Farms & Staking')}\r\n        </Heading>\r\n        <TokenImageWrapper>\r\n          <CardImage\r\n            src=\"https://raw.githubusercontent.com/octahedron22/smurf-frontend/master/public/images/smurf/2.png\"\r\n            alt=\"smurf logo\"\r\n            width={64}\r\n            height={64}\r\n          />\r\n          <Button onClick={addWatchBlzdToken} scale=\"sm\">\r\n            +{' '}\r\n            <img\r\n              style={{ marginLeft: 8 }}\r\n              width={16}\r\n              src=\"https://raw.githubusercontent.com/octahedron22/smurf-frontend/master/public/images/wallet/metamask.png\"\r\n              alt=\"metamask logo\"\r\n            />\r\n          </Button>\r\n        </TokenImageWrapper>\r\n        <Block>\r\n          <BlzdHarvestBalance />\r\n          <Label>{TranslateString(544, 'BLZD to Harvest')}</Label>\r\n        </Block>\r\n        <Block>\r\n          <BlzdWalletBalance />\r\n          <Label>{TranslateString(546, 'BLZD in Wallet')}</Label>\r\n        </Block>\r\n        <Actions>\r\n          {account ? (\r\n            <Button id=\"harvest-all\" disabled={balancesWithValue.length <= 0 || pendingTx} onClick={harvestAllFarms}>\r\n              {pendingTx\r\n                ? TranslateString(548, 'Collecting BLZD')\r\n                : TranslateString(999, `Harvest all (${balancesWithValue.length})`)}\r\n            </Button>\r\n          ) : (\r\n            <UnlockButton fullWidth />\r\n          )}\r\n        </Actions>\r\n      </CardBody>\r\n    </StyledFarmStakingCard>\r\n  )\r\n}\r\n\r\nexport default FarmedStakingCard\r\n"]},"metadata":{},"sourceType":"module"}