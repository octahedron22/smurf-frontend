{"ast":null,"code":"import _objectSpread from\"C:/Dokumente/GitHub/smurf/SMURF-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import React,{useEffect,useCallback}from'react';import{Route,useRouteMatch}from'react-router-dom';import{useDispatch}from'react-redux';import BigNumber from'bignumber.js';import{useWallet}from'@binance-chain/bsc-use-wallet';import{Image,Heading}from'@blzd-dev/uikit';import{BLOCKS_PER_YEAR}from'config';import FlexLayout from'components/layout/Flex';import Page from'components/layout/Page';import{useFarms,usePriceBnbBusd,usePriceBlzdBusd}from'state/hooks';import useRefresh from'hooks/useRefresh';import{fetchFarmUserDataAsync}from'state/actions';import{QuoteToken}from'config/constants/types';import useI18n from'hooks/useI18n';import FarmCard from'./components/FarmCard/FarmCard';import FarmTabButtons from'./components/FarmTabButtons';import Divider from'./components/Divider';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Farms=function Farms(farmsProps){var _useRouteMatch=useRouteMatch(),path=_useRouteMatch.path;var TranslateString=useI18n();var farmsLP=useFarms();var cakePrice=usePriceBlzdBusd();var bnbPrice=usePriceBnbBusd();var _useWallet=useWallet(),account=_useWallet.account,ethereum=_useWallet.ethereum;var tokenMode=farmsProps.tokenMode;var dispatch=useDispatch();var _useRefresh=useRefresh(),fastRefresh=_useRefresh.fastRefresh;useEffect(function(){if(account){dispatch(fetchFarmUserDataAsync(account));}},[account,dispatch,fastRefresh]);var activeFarms=farmsLP.filter(function(farm){return!!farm.isTokenOnly===!!tokenMode&&farm.multiplier!=='0X';});var inactiveFarms=farmsLP.filter(function(farm){return!!farm.isTokenOnly===!!tokenMode&&farm.multiplier==='0X';});// /!\\ This function will be removed soon\n// This function compute the APY for each farm and will be replaced when we have a reliable API\n// to retrieve assets prices against USD\nvar farmsList=useCallback(function(farmsToDisplay,removed){// const cakePriceVsBNB = new BigNumber(farmsLP.find((farm) => farm.pid === CAKE_POOL_PID)?.tokenPriceVsQuote || 0)\nvar farmsToDisplayWithAPY=farmsToDisplay.map(function(farm){// if (!farm.tokenAmount || !farm.lpTotalInQuoteToken || !farm.lpTotalInQuoteToken) {\n//   return farm\n// }\nvar cakeRewardPerBlock=new BigNumber(farm.blzdPerBlock||1).times(new BigNumber(farm.poolWeight)).div(new BigNumber(10).pow(18));var cakeRewardPerYear=cakeRewardPerBlock.times(BLOCKS_PER_YEAR);var apy=cakePrice.times(cakeRewardPerYear);var totalValue=new BigNumber(farm.lpTotalInQuoteToken||0);if(farm.quoteTokenSymbol===QuoteToken.BNB){totalValue=totalValue.times(bnbPrice);}if(totalValue.comparedTo(0)>0){apy=apy.div(totalValue);}return _objectSpread(_objectSpread({},farm),{},{apy:apy});});return farmsToDisplayWithAPY.map(function(farm){return/*#__PURE__*/_jsx(FarmCard,{farm:farm,removed:removed,bnbPrice:bnbPrice,cakePrice:cakePrice,ethereum:ethereum,account:account},farm.pid);});},[bnbPrice,account,cakePrice,ethereum]);return/*#__PURE__*/_jsxs(Page,{children:[/*#__PURE__*/_jsx(Heading,{as:\"h1\",size:\"lg\",color:\"primary\",mb:\"50px\",style:{textAlign:'center'},children:tokenMode?TranslateString(10002,'Stake tokens to earn BLZD'):TranslateString(320,'Stake LP tokens to earn BLZD')}),/*#__PURE__*/_jsx(FarmTabButtons,{}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(Divider,{}),/*#__PURE__*/_jsxs(FlexLayout,{children:[/*#__PURE__*/_jsx(Route,{exact:true,path:\"\".concat(path),children:farmsList(activeFarms,false)}),/*#__PURE__*/_jsx(Route,{exact:true,path:\"\".concat(path,\"/history\"),children:farmsList(inactiveFarms,true)})]})]}),/*#__PURE__*/_jsx(Image,{src:\"https://github.com/octahedron22/smurf-frontend/blob/master/public/images/smurf/9.png\",alt:\"illustration\",width:1900,height:600,responsive:true})]});};export default Farms;","map":{"version":3,"sources":["C:/Dokumente/GitHub/smurf/SMURF-frontend/src/views/Farms/Farms.tsx"],"names":["React","useEffect","useCallback","Route","useRouteMatch","useDispatch","BigNumber","useWallet","Image","Heading","BLOCKS_PER_YEAR","FlexLayout","Page","useFarms","usePriceBnbBusd","usePriceBlzdBusd","useRefresh","fetchFarmUserDataAsync","QuoteToken","useI18n","FarmCard","FarmTabButtons","Divider","Farms","farmsProps","path","TranslateString","farmsLP","cakePrice","bnbPrice","account","ethereum","tokenMode","dispatch","fastRefresh","activeFarms","filter","farm","isTokenOnly","multiplier","inactiveFarms","farmsList","farmsToDisplay","removed","farmsToDisplayWithAPY","map","cakeRewardPerBlock","blzdPerBlock","times","poolWeight","div","pow","cakeRewardPerYear","apy","totalValue","lpTotalInQuoteToken","quoteTokenSymbol","BNB","comparedTo","pid","textAlign"],"mappings":"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","sourcesContent":["import React, { useEffect, useCallback } from 'react'\r\nimport { Route, useRouteMatch } from 'react-router-dom'\r\nimport { useDispatch } from 'react-redux'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { provider } from 'web3-core'\r\nimport { Image, Heading } from '@blzd-dev/uikit'\r\nimport { BLOCKS_PER_YEAR } from 'config'\r\nimport FlexLayout from 'components/layout/Flex'\r\nimport Page from 'components/layout/Page'\r\nimport { useFarms, usePriceBnbBusd, usePriceBlzdBusd } from 'state/hooks'\r\nimport useRefresh from 'hooks/useRefresh'\r\nimport { fetchFarmUserDataAsync } from 'state/actions'\r\nimport { QuoteToken } from 'config/constants/types'\r\nimport useI18n from 'hooks/useI18n'\r\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\r\nimport FarmTabButtons from './components/FarmTabButtons'\r\nimport Divider from './components/Divider'\r\n\r\nexport interface FarmsProps {\r\n  tokenMode?: boolean\r\n}\r\n\r\nconst Farms: React.FC<FarmsProps> = (farmsProps) => {\r\n  const { path } = useRouteMatch()\r\n  const TranslateString = useI18n()\r\n  const farmsLP = useFarms()\r\n  const cakePrice = usePriceBlzdBusd()\r\n  const bnbPrice = usePriceBnbBusd()\r\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\r\n  const { tokenMode } = farmsProps\r\n\r\n  const dispatch = useDispatch()\r\n  const { fastRefresh } = useRefresh()\r\n  useEffect(() => {\r\n    if (account) {\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n    }\r\n  }, [account, dispatch, fastRefresh])\r\n\r\n  const activeFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier !== '0X')\r\n  const inactiveFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier === '0X')\r\n\r\n  // /!\\ This function will be removed soon\r\n  // This function compute the APY for each farm and will be replaced when we have a reliable API\r\n  // to retrieve assets prices against USD\r\n  const farmsList = useCallback(\r\n    (farmsToDisplay, removed: boolean) => {\r\n      // const cakePriceVsBNB = new BigNumber(farmsLP.find((farm) => farm.pid === CAKE_POOL_PID)?.tokenPriceVsQuote || 0)\r\n      const farmsToDisplayWithAPY: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\r\n        // if (!farm.tokenAmount || !farm.lpTotalInQuoteToken || !farm.lpTotalInQuoteToken) {\r\n        //   return farm\r\n        // }\r\n        const cakeRewardPerBlock = new BigNumber(farm.blzdPerBlock || 1)\r\n          .times(new BigNumber(farm.poolWeight))\r\n          .div(new BigNumber(10).pow(18))\r\n        const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\r\n\r\n        let apy = cakePrice.times(cakeRewardPerYear)\r\n\r\n        let totalValue = new BigNumber(farm.lpTotalInQuoteToken || 0)\r\n\r\n        if (farm.quoteTokenSymbol === QuoteToken.BNB) {\r\n          totalValue = totalValue.times(bnbPrice)\r\n        }\r\n\r\n        if (totalValue.comparedTo(0) > 0) {\r\n          apy = apy.div(totalValue)\r\n        }\r\n\r\n        return { ...farm, apy }\r\n      })\r\n      return farmsToDisplayWithAPY.map((farm) => (\r\n        <FarmCard\r\n          key={farm.pid}\r\n          farm={farm}\r\n          removed={removed}\r\n          bnbPrice={bnbPrice}\r\n          cakePrice={cakePrice}\r\n          ethereum={ethereum}\r\n          account={account}\r\n        />\r\n      ))\r\n    },\r\n    [bnbPrice, account, cakePrice, ethereum],\r\n  )\r\n\r\n  return (\r\n    <Page>\r\n      <Heading as=\"h1\" size=\"lg\" color=\"primary\" mb=\"50px\" style={{ textAlign: 'center' }}>\r\n        {tokenMode\r\n          ? TranslateString(10002, 'Stake tokens to earn BLZD')\r\n          : TranslateString(320, 'Stake LP tokens to earn BLZD')}\r\n      </Heading>\r\n      <FarmTabButtons />\r\n      <div>\r\n        <Divider />\r\n        <FlexLayout>\r\n          <Route exact path={`${path}`}>\r\n            {farmsList(activeFarms, false)}\r\n          </Route>\r\n          <Route exact path={`${path}/history`}>\r\n            {farmsList(inactiveFarms, true)}\r\n          </Route>\r\n        </FlexLayout>\r\n      </div>\r\n      <Image src=\"https://github.com/octahedron22/smurf-frontend/blob/master/public/images/smurf/9.png\" alt=\"illustration\" width={1900} height={600} responsive />\r\n    </Page>\r\n  )\r\n}\r\n\r\nexport default Farms\r\n"]},"metadata":{},"sourceType":"module"}