{"ast":null,"code":"import _regeneratorRuntime from\"C:/Dokumente/GitHub/smurf/SMURF-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"C:/Dokumente/GitHub/smurf/SMURF-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"C:/Dokumente/GitHub/smurf/SMURF-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _taggedTemplateLiteral from\"C:/Dokumente/GitHub/smurf/SMURF-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";var _templateObject,_templateObject2;import React,{useEffect,useRef}from'react';import styled from'styled-components';import{Button,Heading,Modal,useModal}from'@blzd-dev/uikit';import useI18n from'hooks/useI18n';import{useWallet}from'@binance-chain/bsc-use-wallet';import rabbitmintingfarm from'config/abi/rabbitmintingfarm.json';import{RABBIT_MINTING_FARM_ADDRESS}from'config/constants/nfts';import multicall from'utils/multicall';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var ModalContent=styled.div(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  padding: 24px;\\n  text-align: center;\\n\"])));var Actions=styled.div(_templateObject2||(_templateObject2=_taggedTemplateLiteral([\"\\n  text-align: center;\\n\"])));var NftYouWonModal=function NftYouWonModal(_ref){var onDismiss=_ref.onDismiss;var TranslateString=useI18n();return/*#__PURE__*/_jsxs(Modal,{title:TranslateString(999,'Congratulations!'),onDismiss:onDismiss,children:[/*#__PURE__*/_jsxs(ModalContent,{children:[/*#__PURE__*/_jsx(\"img\",{src:\"https://raw.githubusercontent.com/octahedron22/smurf-frontend/master/public/images/present.svg\",alt:\"You won present\",style:{height:'64px',marginBottom:'24px'}}),/*#__PURE__*/_jsx(Heading,{size:\"lg\",color:\"secondary\",children:TranslateString(999,'You won an NFT!')})]}),/*#__PURE__*/_jsx(Actions,{children:/*#__PURE__*/_jsx(Button,{as:\"a\",href:\"/nft\",children:TranslateString(999,'Go to claim NFT')})})]});};/**\r\n * 1. Checks if nft supply available\r\n * 2. If supply is available check if the user can claim\r\n * 3. If the user can claim show a modal\r\n */var NftGlobalNotification=function NftGlobalNotification(){var _useWallet=useWallet(),account=_useWallet.account;var _useModal=useModal(/*#__PURE__*/_jsx(NftYouWonModal,{})),_useModal2=_slicedToArray(_useModal,1),onPresentBurnModal=_useModal2[0];var showModal=useRef(function(){return onPresentBurnModal();});useEffect(function(){var checkNftStatus=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var _yield$multicall,_yield$multicall2,totalSupplyDistributedArr,currentDistributedSupplyArr,canClaimArr,hasClaimedArr,_totalSupplyDistribut,totalSupplyDistributed,_currentDistributedSu,currentDistributedSupply,_canClaimArr,canClaim,_hasClaimedArr,hasClaimed;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return multicall(rabbitmintingfarm,[{address:RABBIT_MINTING_FARM_ADDRESS,name:'totalSupplyDistributed'},{address:RABBIT_MINTING_FARM_ADDRESS,name:'currentDistributedSupply'},{address:RABBIT_MINTING_FARM_ADDRESS,name:'canClaim',params:[account]},{address:RABBIT_MINTING_FARM_ADDRESS,name:'hasClaimed',params:[account]}]);case 2:_yield$multicall=_context.sent;_yield$multicall2=_slicedToArray(_yield$multicall,4);totalSupplyDistributedArr=_yield$multicall2[0];currentDistributedSupplyArr=_yield$multicall2[1];canClaimArr=_yield$multicall2[2];hasClaimedArr=_yield$multicall2[3];// TODO: Figure out why these values are coming back as an array\n_totalSupplyDistribut=_slicedToArray(totalSupplyDistributedArr,1),totalSupplyDistributed=_totalSupplyDistribut[0];_currentDistributedSu=_slicedToArray(currentDistributedSupplyArr,1),currentDistributedSupply=_currentDistributedSu[0];_canClaimArr=_slicedToArray(canClaimArr,1),canClaim=_canClaimArr[0];_hasClaimedArr=_slicedToArray(hasClaimedArr,1),hasClaimed=_hasClaimedArr[0];if(currentDistributedSupply.lt(totalSupplyDistributed)&&canClaim&&!hasClaimed){showModal.current();}case 13:case\"end\":return _context.stop();}}},_callee);}));return function checkNftStatus(){return _ref2.apply(this,arguments);};}();if(account&&!document.location.href.includes('/nft')){checkNftStatus();}},[account,showModal]);return/*#__PURE__*/_jsx(\"div\",{});};export default NftGlobalNotification;","map":{"version":3,"sources":["C:/Dokumente/GitHub/smurf/SMURF-frontend/src/views/Nft/components/NftGlobalNotification.tsx"],"names":["React","useEffect","useRef","styled","Button","Heading","Modal","useModal","useI18n","useWallet","rabbitmintingfarm","RABBIT_MINTING_FARM_ADDRESS","multicall","ModalContent","div","Actions","NftYouWonModal","onDismiss","TranslateString","height","marginBottom","NftGlobalNotification","account","onPresentBurnModal","showModal","checkNftStatus","address","name","params","totalSupplyDistributedArr","currentDistributedSupplyArr","canClaimArr","hasClaimedArr","totalSupplyDistributed","currentDistributedSupply","canClaim","hasClaimed","lt","current","document","location","href","includes"],"mappings":"8qBAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,CAA2BC,MAA3B,KAAyC,OAAzC,CAEA,MAAOC,CAAAA,MAAP,KAAmB,mBAAnB,CACA,OAASC,MAAT,CAAiBC,OAAjB,CAA0BC,KAA1B,CAAiCC,QAAjC,KAAiD,iBAAjD,CACA,MAAOC,CAAAA,OAAP,KAAoB,eAApB,CACA,OAASC,SAAT,KAA0B,+BAA1B,CACA,MAAOC,CAAAA,iBAAP,KAA8B,mCAA9B,CACA,OAASC,2BAAT,KAA4C,uBAA5C,CACA,MAAOC,CAAAA,SAAP,KAAsB,iBAAtB,C,wFAMA,GAAMC,CAAAA,YAAY,CAAGV,MAAM,CAACW,GAAV,4GAAlB,CAKA,GAAMC,CAAAA,OAAO,CAAGZ,MAAM,CAACW,GAAV,4FAAb,CAIA,GAAME,CAAAA,cAA6C,CAAG,QAAhDA,CAAAA,cAAgD,MAAmB,IAAhBC,CAAAA,SAAgB,MAAhBA,SAAgB,CACvE,GAAMC,CAAAA,eAAe,CAAGV,OAAO,EAA/B,CACA,mBACE,MAAC,KAAD,EAAO,KAAK,CAAEU,eAAe,CAAC,GAAD,CAAM,kBAAN,CAA7B,CAAwD,SAAS,CAAED,SAAnE,wBACE,MAAC,YAAD,yBACE,YACE,GAAG,CAAC,gGADN,CAEE,GAAG,CAAC,iBAFN,CAGE,KAAK,CAAE,CAAEE,MAAM,CAAE,MAAV,CAAkBC,YAAY,CAAE,MAAhC,CAHT,EADF,cAME,KAAC,OAAD,EAAS,IAAI,CAAC,IAAd,CAAmB,KAAK,CAAC,WAAzB,UACGF,eAAe,CAAC,GAAD,CAAM,iBAAN,CADlB,EANF,GADF,cAWE,KAAC,OAAD,wBACE,KAAC,MAAD,EAAQ,EAAE,CAAC,GAAX,CAAe,IAAI,CAAC,MAApB,UACGA,eAAe,CAAC,GAAD,CAAM,iBAAN,CADlB,EADF,EAXF,GADF,CAmBD,CArBD,CAuBA;AACA;AACA;AACA;AACA,GACA,GAAMG,CAAAA,qBAAqB,CAAG,QAAxBA,CAAAA,qBAAwB,EAAM,gBACdZ,SAAS,EADK,CAC1Ba,OAD0B,YAC1BA,OAD0B,eAELf,QAAQ,cAAC,KAAC,cAAD,IAAD,CAFH,wCAE3BgB,kBAF2B,eAGlC,GAAMC,CAAAA,SAAS,CAAGtB,MAAM,CAAC,iBAAMqB,CAAAA,kBAAkB,EAAxB,EAAD,CAAxB,CAEAtB,SAAS,CAAC,UAAM,CACd,GAAMwB,CAAAA,cAAc,2FAAG,4ZAC8Eb,CAAAA,SAAS,CAC1GF,iBAD0G,CAE1G,CACE,CAAEgB,OAAO,CAAEf,2BAAX,CAAwCgB,IAAI,CAAE,wBAA9C,CADF,CAEE,CAAED,OAAO,CAAEf,2BAAX,CAAwCgB,IAAI,CAAE,0BAA9C,CAFF,CAGE,CAAED,OAAO,CAAEf,2BAAX,CAAwCgB,IAAI,CAAE,UAA9C,CAA0DC,MAAM,CAAE,CAACN,OAAD,CAAlE,CAHF,CAIE,CAAEI,OAAO,CAAEf,2BAAX,CAAwCgB,IAAI,CAAE,YAA9C,CAA4DC,MAAM,CAAE,CAACN,OAAD,CAApE,CAJF,CAF0G,CADvF,4FACdO,yBADc,sBACaC,2BADb,sBAC0CC,WAD1C,sBACuDC,aADvD,sBAWrB;AAXqB,qCAYyBH,yBAZzB,IAYdI,sBAZc,+DAa2BH,2BAb3B,IAadI,wBAbc,sDAcSH,WAdT,IAcdI,QAdc,+CAeWH,aAfX,IAedI,UAfc,mBAiBrB,GAAIF,wBAAwB,CAACG,EAAzB,CAA4BJ,sBAA5B,GAAuDE,QAAvD,EAAmE,CAACC,UAAxE,CAAoF,CAClFZ,SAAS,CAACc,OAAV,GACD,CAnBoB,uDAAH,kBAAdb,CAAAA,cAAc,2CAApB,CAsBA,GAAIH,OAAO,EAAI,CAACiB,QAAQ,CAACC,QAAT,CAAkBC,IAAlB,CAAuBC,QAAvB,CAAgC,MAAhC,CAAhB,CAAyD,CACvDjB,cAAc,GACf,CACF,CA1BQ,CA0BN,CAACH,OAAD,CAAUE,SAAV,CA1BM,CAAT,CA4BA,mBAAO,cAAP,CACD,CAlCD,CAoCA,cAAeH,CAAAA,qBAAf","sourcesContent":["import React, { useEffect, useRef } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport { Button, Heading, Modal, useModal } from '@blzd-dev/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport rabbitmintingfarm from 'config/abi/rabbitmintingfarm.json'\r\nimport { RABBIT_MINTING_FARM_ADDRESS } from 'config/constants/nfts'\r\nimport multicall from 'utils/multicall'\r\n\r\ninterface NftYouWonModalProps {\r\n  onDismiss?: () => void\r\n}\r\n\r\nconst ModalContent = styled.div`\r\n  padding: 24px;\r\n  text-align: center;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  text-align: center;\r\n`\r\n\r\nconst NftYouWonModal: React.FC<NftYouWonModalProps> = ({ onDismiss }) => {\r\n  const TranslateString = useI18n()\r\n  return (\r\n    <Modal title={TranslateString(999, 'Congratulations!')} onDismiss={onDismiss}>\r\n      <ModalContent>\r\n        <img\r\n          src=\"https://raw.githubusercontent.com/octahedron22/smurf-frontend/master/public/images/present.svg\"\r\n          alt=\"You won present\"\r\n          style={{ height: '64px', marginBottom: '24px' }}\r\n        />\r\n        <Heading size=\"lg\" color=\"secondary\">\r\n          {TranslateString(999, 'You won an NFT!')}\r\n        </Heading>\r\n      </ModalContent>\r\n      <Actions>\r\n        <Button as=\"a\" href=\"/nft\">\r\n          {TranslateString(999, 'Go to claim NFT')}\r\n        </Button>\r\n      </Actions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\n/**\r\n * 1. Checks if nft supply available\r\n * 2. If supply is available check if the user can claim\r\n * 3. If the user can claim show a modal\r\n */\r\nconst NftGlobalNotification = () => {\r\n  const { account } = useWallet()\r\n  const [onPresentBurnModal] = useModal(<NftYouWonModal />)\r\n  const showModal = useRef(() => onPresentBurnModal())\r\n\r\n  useEffect(() => {\r\n    const checkNftStatus = async () => {\r\n      const [totalSupplyDistributedArr, currentDistributedSupplyArr, canClaimArr, hasClaimedArr] = await multicall(\r\n        rabbitmintingfarm,\r\n        [\r\n          { address: RABBIT_MINTING_FARM_ADDRESS, name: 'totalSupplyDistributed' },\r\n          { address: RABBIT_MINTING_FARM_ADDRESS, name: 'currentDistributedSupply' },\r\n          { address: RABBIT_MINTING_FARM_ADDRESS, name: 'canClaim', params: [account] },\r\n          { address: RABBIT_MINTING_FARM_ADDRESS, name: 'hasClaimed', params: [account] },\r\n        ],\r\n      )\r\n\r\n      // TODO: Figure out why these values are coming back as an array\r\n      const [totalSupplyDistributed]: [BigNumber] = totalSupplyDistributedArr\r\n      const [currentDistributedSupply]: [BigNumber] = currentDistributedSupplyArr\r\n      const [canClaim]: [boolean] = canClaimArr\r\n      const [hasClaimed]: [boolean] = hasClaimedArr\r\n\r\n      if (currentDistributedSupply.lt(totalSupplyDistributed) && canClaim && !hasClaimed) {\r\n        showModal.current()\r\n      }\r\n    }\r\n\r\n    if (account && !document.location.href.includes('/nft')) {\r\n      checkNftStatus()\r\n    }\r\n  }, [account, showModal])\r\n\r\n  return <div />\r\n}\r\n\r\nexport default NftGlobalNotification\r\n"]},"metadata":{},"sourceType":"module"}