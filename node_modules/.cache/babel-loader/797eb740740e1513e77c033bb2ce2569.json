{"ast":null,"code":"import _taggedTemplateLiteral from\"C:/Dokumente/GitHub/smurf/SMURF-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";import _slicedToArray from\"C:/Dokumente/GitHub/smurf/SMURF-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";var _templateObject;import React,{useMemo}from'react';import{Route,useRouteMatch}from'react-router-dom';import styled from'styled-components';import{useWallet}from'@binance-chain/bsc-use-wallet';import{Heading}from'@blzd-dev/uikit';import orderBy from'lodash/orderBy';import partition from'lodash/partition';import useI18n from'hooks/useI18n';import{usePools,useBlock}from'state/hooks';import FlexLayout from'components/layout/Flex';import Page from'components/layout/Page';import PoolCard from'./components/PoolCard';import PoolTabButtons from'./components/PoolTabButtons';import Divider from'./components/Divider';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var Farm=function Farm(){var _useRouteMatch=useRouteMatch(),path=_useRouteMatch.path;var TranslateString=useI18n();var _useWallet=useWallet(),account=_useWallet.account;var pools=usePools(account);var _useBlock=useBlock(),blockNumber=_useBlock.blockNumber;var _useMemo=useMemo(function(){return partition(pools,function(pool){return pool.isFinished||blockNumber>pool.endBlock;});},[blockNumber,pools]),_useMemo2=_slicedToArray(_useMemo,2),finishedPools=_useMemo2[0],openPools=_useMemo2[1];return/*#__PURE__*/_jsxs(Page,{children:[/*#__PURE__*/_jsxs(Hero,{children:[/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(Heading,{as:\"h1\",size:\"xxl\",mb:\"16px\",children:TranslateString(282,'SMURF Village')}),/*#__PURE__*/_jsxs(\"ul\",{children:[/*#__PURE__*/_jsx(\"li\",{children:TranslateString(580,'Stake SMURF to earn BUSD, BNB and more...')}),/*#__PURE__*/_jsx(\"li\",{children:TranslateString(406,'Rewards are calculated per block.')}),/*#__PURE__*/_jsx(\"li\",{children:TranslateString(0,'...coming soon, stay tuned...')})]})]}),/*#__PURE__*/_jsx(\"div\",{style:{textAlign:'right'},children:/*#__PURE__*/_jsx(\"img\",{src:\"https://raw.githubusercontent.com/octahedron22/smurf-frontend/master/public/images/smurfstakepage.png\",alt:\"SMURF Village icon\"})})]}),/*#__PURE__*/_jsx(PoolTabButtons,{}),/*#__PURE__*/_jsx(Divider,{}),/*#__PURE__*/_jsxs(FlexLayout,{children:[/*#__PURE__*/_jsx(Route,{exact:true,path:\"\".concat(path),children:/*#__PURE__*/_jsx(_Fragment,{children:orderBy(openPools,['sortOrder']).map(function(pool){return/*#__PURE__*/_jsx(PoolCard,{pool:pool},pool.sousId);})})}),/*#__PURE__*/_jsx(Route,{path:\"\".concat(path,\"/history\"),children:orderBy(finishedPools,['sortOrder']).map(function(pool){return/*#__PURE__*/_jsx(PoolCard,{pool:pool},pool.sousId);})})]})]});};var Hero=styled.div(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  align-items: center;\\n  color: \",\";\\n  display: grid;\\n  grid-gap: 32px;\\n  grid-template-columns: 1fr;\\n  margin-left: auto;\\n  margin-right: auto;\\n  max-width: 250px;\\n  padding: 48px 0;\\n  ul {\\n    margin: 0;\\n    padding: 0;\\n    list-style-type: none;\\n    font-size: 16px;\\n    li {\\n      margin-bottom: 4px;\\n    }\\n  }\\n  img {\\n    height: auto;\\n    max-width: 396px;\\n  }\\n  @media (min-width: 576px) {\\n    grid-template-columns: 1fr 1fr;\\n    margin: 0;\\n    max-width: none;\\n  }\\n\"])),function(_ref){var theme=_ref.theme;return theme.colors.primary;});export default Farm;","map":{"version":3,"sources":["C:/Dokumente/GitHub/smurf/SMURF-frontend/src/views/Pools/BLZDStaking.tsx"],"names":["React","useMemo","Route","useRouteMatch","styled","useWallet","Heading","orderBy","partition","useI18n","usePools","useBlock","FlexLayout","Page","PoolCard","PoolTabButtons","Divider","Farm","path","TranslateString","account","pools","blockNumber","pool","isFinished","endBlock","finishedPools","openPools","textAlign","map","sousId","Hero","div","theme","colors","primary"],"mappings":"kWAAA,MAAOA,CAAAA,KAAP,EAAgBC,OAAhB,KAA+B,OAA/B,CACA,OAASC,KAAT,CAAgBC,aAAhB,KAAqC,kBAArC,CACA,MAAOC,CAAAA,MAAP,KAAmB,mBAAnB,CACA,OAASC,SAAT,KAA0B,+BAA1B,CACA,OAASC,OAAT,KAAwB,iBAAxB,CACA,MAAOC,CAAAA,OAAP,KAAoB,gBAApB,CACA,MAAOC,CAAAA,SAAP,KAAsB,kBAAtB,CACA,MAAOC,CAAAA,OAAP,KAAoB,eAApB,CACA,OAASC,QAAT,CAAmBC,QAAnB,KAAmC,aAAnC,CACA,MAAOC,CAAAA,UAAP,KAAuB,wBAAvB,CACA,MAAOC,CAAAA,IAAP,KAAiB,wBAAjB,CACA,MAAOC,CAAAA,QAAP,KAAqB,uBAArB,CACA,MAAOC,CAAAA,cAAP,KAA2B,6BAA3B,CACA,MAAOC,CAAAA,OAAP,KAAoB,sBAApB,C,6IAEA,GAAMC,CAAAA,IAAc,CAAG,QAAjBA,CAAAA,IAAiB,EAAM,oBACVd,aAAa,EADH,CACnBe,IADmB,gBACnBA,IADmB,CAE3B,GAAMC,CAAAA,eAAe,CAAGV,OAAO,EAA/B,CAF2B,eAGPJ,SAAS,EAHF,CAGnBe,OAHmB,YAGnBA,OAHmB,CAI3B,GAAMC,CAAAA,KAAK,CAAGX,QAAQ,CAACU,OAAD,CAAtB,CAJ2B,cAKHT,QAAQ,EALL,CAKnBW,WALmB,WAKnBA,WALmB,cAOQrB,OAAO,CACxC,iBAAMO,CAAAA,SAAS,CAACa,KAAD,CAAQ,SAACE,IAAD,QAAUA,CAAAA,IAAI,CAACC,UAAL,EAAmBF,WAAW,CAAGC,IAAI,CAACE,QAAhD,EAAR,CAAf,EADwC,CAExC,CAACH,WAAD,CAAcD,KAAd,CAFwC,CAPf,sCAOpBK,aAPoB,cAOLC,SAPK,cAY3B,mBACE,MAAC,IAAD,yBACE,MAAC,IAAD,yBACE,oCACE,KAAC,OAAD,EAAS,EAAE,CAAC,IAAZ,CAAiB,IAAI,CAAC,KAAtB,CAA4B,EAAE,CAAC,MAA/B,UACGR,eAAe,CAAC,GAAD,CAAM,eAAN,CADlB,EADF,cAIE,mCACE,oBAAKA,eAAe,CAAC,GAAD,CAAM,2CAAN,CAApB,EADF,cAEE,oBAAKA,eAAe,CAAC,GAAD,CAAM,mCAAN,CAApB,EAFF,cAGE,oBAAKA,eAAe,CAAC,CAAD,CAAI,+BAAJ,CAApB,EAHF,GAJF,GADF,cAWE,YAAK,KAAK,CAAE,CAAES,SAAS,CAAE,OAAb,CAAZ,uBACE,YACE,GAAG,CAAC,uGADN,CAEE,GAAG,CAAC,oBAFN,EADF,EAXF,GADF,cAmBE,KAAC,cAAD,IAnBF,cAoBE,KAAC,OAAD,IApBF,cAqBE,MAAC,UAAD,yBACE,KAAC,KAAD,EAAO,KAAK,KAAZ,CAAa,IAAI,WAAKV,IAAL,CAAjB,uBACE,yBACGX,OAAO,CAACoB,SAAD,CAAY,CAAC,WAAD,CAAZ,CAAP,CAAkCE,GAAlC,CAAsC,SAACN,IAAD,qBACrC,KAAC,QAAD,EAA4B,IAAI,CAAEA,IAAlC,EAAeA,IAAI,CAACO,MAApB,CADqC,EAAtC,CADH,EADF,EADF,cASE,KAAC,KAAD,EAAO,IAAI,WAAKZ,IAAL,YAAX,UACGX,OAAO,CAACmB,aAAD,CAAgB,CAAC,WAAD,CAAhB,CAAP,CAAsCG,GAAtC,CAA0C,SAACN,IAAD,qBACzC,KAAC,QAAD,EAA4B,IAAI,CAAEA,IAAlC,EAAeA,IAAI,CAACO,MAApB,CADyC,EAA1C,CADH,EATF,GArBF,GADF,CAuCD,CAnDD,CAqDA,GAAMC,CAAAA,IAAI,CAAG3B,MAAM,CAAC4B,GAAV,ujBAEC,kBAAGC,CAAAA,KAAH,MAAGA,KAAH,OAAeA,CAAAA,KAAK,CAACC,MAAN,CAAaC,OAA5B,EAFD,CAAV,CA8BA,cAAelB,CAAAA,IAAf","sourcesContent":["import React, { useMemo } from 'react'\r\nimport { Route, useRouteMatch } from 'react-router-dom'\r\nimport styled from 'styled-components'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { Heading } from '@blzd-dev/uikit'\r\nimport orderBy from 'lodash/orderBy'\r\nimport partition from 'lodash/partition'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { usePools, useBlock } from 'state/hooks'\r\nimport FlexLayout from 'components/layout/Flex'\r\nimport Page from 'components/layout/Page'\r\nimport PoolCard from './components/PoolCard'\r\nimport PoolTabButtons from './components/PoolTabButtons'\r\nimport Divider from './components/Divider'\r\n\r\nconst Farm: React.FC = () => {\r\n  const { path } = useRouteMatch()\r\n  const TranslateString = useI18n()\r\n  const { account } = useWallet()\r\n  const pools = usePools(account)\r\n  const { blockNumber } = useBlock()\r\n\r\n  const [finishedPools, openPools] = useMemo(\r\n    () => partition(pools, (pool) => pool.isFinished || blockNumber > pool.endBlock),\r\n    [blockNumber, pools],\r\n  )\r\n\r\n  return (\r\n    <Page>\r\n      <Hero>\r\n        <div>\r\n          <Heading as=\"h1\" size=\"xxl\" mb=\"16px\">\r\n            {TranslateString(282, 'SMURF Village')}\r\n          </Heading>\r\n          <ul>\r\n            <li>{TranslateString(580, 'Stake SMURF to earn BUSD, BNB and more...')}</li>            \r\n            <li>{TranslateString(406, 'Rewards are calculated per block.')}</li>\r\n            <li>{TranslateString(0, '...coming soon, stay tuned...')}</li>\r\n          </ul>\r\n        </div>\r\n        <div style={{ textAlign: 'right' }}>\r\n          <img\r\n            src=\"https://raw.githubusercontent.com/octahedron22/smurf-frontend/master/public/images/smurfstakepage.png\"\r\n            alt=\"SMURF Village icon\"\r\n          />\r\n        </div>\r\n      </Hero>\r\n      <PoolTabButtons />\r\n      <Divider />\r\n      <FlexLayout>\r\n        <Route exact path={`${path}`}>\r\n          <>\r\n            {orderBy(openPools, ['sortOrder']).map((pool) => (\r\n              <PoolCard key={pool.sousId} pool={pool} />\r\n            ))}\r\n            {/* <Coming /> */}\r\n          </>\r\n        </Route>\r\n        <Route path={`${path}/history`}>\r\n          {orderBy(finishedPools, ['sortOrder']).map((pool) => (\r\n            <PoolCard key={pool.sousId} pool={pool} />\r\n          ))}\r\n        </Route>\r\n      </FlexLayout>\r\n    </Page>\r\n  )\r\n}\r\n\r\nconst Hero = styled.div`\r\n  align-items: center;\r\n  color: ${({ theme }) => theme.colors.primary};\r\n  display: grid;\r\n  grid-gap: 32px;\r\n  grid-template-columns: 1fr;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  max-width: 250px;\r\n  padding: 48px 0;\r\n  ul {\r\n    margin: 0;\r\n    padding: 0;\r\n    list-style-type: none;\r\n    font-size: 16px;\r\n    li {\r\n      margin-bottom: 4px;\r\n    }\r\n  }\r\n  img {\r\n    height: auto;\r\n    max-width: 396px;\r\n  }\r\n  @media (min-width: 576px) {\r\n    grid-template-columns: 1fr 1fr;\r\n    margin: 0;\r\n    max-width: none;\r\n  }\r\n`\r\n\r\nexport default Farm\r\n"]},"metadata":{},"sourceType":"module"}