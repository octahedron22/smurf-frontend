{"ast":null,"code":"import addresses from'config/constants/contracts';var chainId=process.env.REACT_APP_CHAIN_ID;export var getAddress=function getAddress(address){var mainNetChainId=56;return address[chainId]?address[chainId]:address[mainNetChainId];};export var getxBlzdAddress=function getxBlzdAddress(){return addresses.xblzd[chainId];};export var getCakeAddress=function getCakeAddress(){return addresses.cake[chainId];};export var getMasterChefAddress=function getMasterChefAddress(){return addresses.masterChef[chainId];};export var getMulticallAddress=function getMulticallAddress(){return addresses.mulltiCall[chainId];};export var getWbnbAddress=function getWbnbAddress(){return addresses.wbnb[chainId];};export var getLotteryAddress=function getLotteryAddress(){return addresses.lottery[chainId];};export var getLotteryTicketAddress=function getLotteryTicketAddress(){return addresses.lotteryNFT[chainId];};","map":{"version":3,"sources":["C:/Dokumente/GitHub/smurf/SMURF-frontend/src/utils/addressHelpers.ts"],"names":["addresses","chainId","process","env","REACT_APP_CHAIN_ID","getAddress","address","mainNetChainId","getxBlzdAddress","xblzd","getCakeAddress","cake","getMasterChefAddress","masterChef","getMulticallAddress","mulltiCall","getWbnbAddress","wbnb","getLotteryAddress","lottery","getLotteryTicketAddress","lotteryNFT"],"mappings":"AAAA,MAAOA,CAAAA,SAAP,KAAsB,4BAAtB,CAGA,GAAMC,CAAAA,OAAO,CAAGC,OAAO,CAACC,GAAR,CAAYC,kBAA5B,CAEA,MAAO,IAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACC,OAAD,CAA8B,CACtD,GAAMC,CAAAA,cAAc,CAAG,EAAvB,CACA,MAAOD,CAAAA,OAAO,CAACL,OAAD,CAAP,CAAmBK,OAAO,CAACL,OAAD,CAA1B,CAAsCK,OAAO,CAACC,cAAD,CAApD,CACD,CAHM,CAKP,MAAO,IAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,EAAM,CACnC,MAAOR,CAAAA,SAAS,CAACS,KAAV,CAAgBR,OAAhB,CAAP,CACD,CAFM,CAIP,MAAO,IAAMS,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,EAAM,CAClC,MAAOV,CAAAA,SAAS,CAACW,IAAV,CAAeV,OAAf,CAAP,CACD,CAFM,CAGP,MAAO,IAAMW,CAAAA,oBAAoB,CAAG,QAAvBA,CAAAA,oBAAuB,EAAM,CACxC,MAAOZ,CAAAA,SAAS,CAACa,UAAV,CAAqBZ,OAArB,CAAP,CACD,CAFM,CAGP,MAAO,IAAMa,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,EAAM,CACvC,MAAOd,CAAAA,SAAS,CAACe,UAAV,CAAqBd,OAArB,CAAP,CACD,CAFM,CAGP,MAAO,IAAMe,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,EAAM,CAClC,MAAOhB,CAAAA,SAAS,CAACiB,IAAV,CAAehB,OAAf,CAAP,CACD,CAFM,CAGP,MAAO,IAAMiB,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,EAAM,CACrC,MAAOlB,CAAAA,SAAS,CAACmB,OAAV,CAAkBlB,OAAlB,CAAP,CACD,CAFM,CAGP,MAAO,IAAMmB,CAAAA,uBAAuB,CAAG,QAA1BA,CAAAA,uBAA0B,EAAM,CAC3C,MAAOpB,CAAAA,SAAS,CAACqB,UAAV,CAAqBpB,OAArB,CAAP,CACD,CAFM","sourcesContent":["import addresses from 'config/constants/contracts'\r\nimport { Address } from 'config/constants/types'\r\n\r\nconst chainId = process.env.REACT_APP_CHAIN_ID\r\n\r\nexport const getAddress = (address: Address): string => {\r\n  const mainNetChainId = 56\r\n  return address[chainId] ? address[chainId] : address[mainNetChainId]\r\n}\r\n\r\nexport const getxBlzdAddress = () => {\r\n  return addresses.xblzd[chainId]\r\n}\r\n\r\nexport const getCakeAddress = () => {\r\n  return addresses.cake[chainId]\r\n}\r\nexport const getMasterChefAddress = () => {\r\n  return addresses.masterChef[chainId]\r\n}\r\nexport const getMulticallAddress = () => {\r\n  return addresses.mulltiCall[chainId]\r\n}\r\nexport const getWbnbAddress = () => {\r\n  return addresses.wbnb[chainId]\r\n}\r\nexport const getLotteryAddress = () => {\r\n  return addresses.lottery[chainId]\r\n}\r\nexport const getLotteryTicketAddress = () => {\r\n  return addresses.lotteryNFT[chainId]\r\n}\r\n"]},"metadata":{},"sourceType":"module"}