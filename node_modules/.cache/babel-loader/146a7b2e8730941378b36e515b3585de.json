{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\frkul\\\\Documents\\\\smurf.money\\\\SMURF-frontend\\\\src\\\\views\\\\Pools\\\\BLZDStaking.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useMemo } from 'react';\nimport { Route, useRouteMatch } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { useWallet } from '@binance-chain/bsc-use-wallet';\nimport { Heading } from '@blzd-dev/uikit';\nimport orderBy from 'lodash/orderBy';\nimport partition from 'lodash/partition';\nimport useI18n from 'hooks/useI18n';\nimport { usePools, useBlock } from 'state/hooks';\nimport FlexLayout from 'components/layout/Flex';\nimport Page from 'components/layout/Page'; // import Coming from './components/Coming'\n\nimport PoolCard from './components/PoolCard';\nimport PoolTabButtons from './components/PoolTabButtons';\nimport Divider from './components/Divider';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Farm = () => {\n  _s();\n\n  const {\n    path\n  } = useRouteMatch();\n  const TranslateString = useI18n();\n  const {\n    account\n  } = useWallet();\n  const pools = usePools(account);\n  const {\n    blockNumber\n  } = useBlock();\n  const [finishedPools, openPools] = useMemo(() => partition(pools, pool => pool.isFinished || blockNumber > pool.endBlock), [blockNumber, pools]);\n  return /*#__PURE__*/_jsxDEV(Page, {\n    children: [/*#__PURE__*/_jsxDEV(Hero, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Heading, {\n          as: \"h1\",\n          size: \"xxl\",\n          mb: \"16px\",\n          children: TranslateString(282, 'BLZD Pool')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: TranslateString(580, 'Stake BLZD to earn tokens.')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: TranslateString(404, 'You can unstake at any time.')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: TranslateString(406, 'Rewards are calculated per block.')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          textAlign: 'right'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"https://www.smurf.money/images/blzdstakepage.png\",\n          alt: \"BLZD Pool icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PoolTabButtons, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FlexLayout, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: `${path}`,\n        children: /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: orderBy(openPools, ['sortOrder']).map(pool => /*#__PURE__*/_jsxDEV(PoolCard, {\n            pool: pool\n          }, pool.sousId, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 15\n          }, this))\n        }, void 0, false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: `${path}/history`,\n        children: orderBy(finishedPools, ['sortOrder']).map(pool => /*#__PURE__*/_jsxDEV(PoolCard, {\n          pool: pool\n        }, pool.sousId, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Farm, \"hxFdDADKnVVbFOSPsHcnlGt9v1I=\", false, function () {\n  return [useRouteMatch, useI18n, useWallet, usePools, useBlock];\n});\n\n_c = Farm;\nconst Hero = styled.div`\n  align-items: center;\n  color: ${({\n  theme\n}) => theme.colors.primary};\n  display: grid;\n  grid-gap: 32px;\n  grid-template-columns: 1fr;\n  margin-left: auto;\n  margin-right: auto;\n  max-width: 250px;\n  padding: 48px 0;\n  ul {\n    margin: 0;\n    padding: 0;\n    list-style-type: none;\n    font-size: 16px;\n    li {\n      margin-bottom: 4px;\n    }\n  }\n  img {\n    height: auto;\n    max-width: 396px;\n  }\n  @media (min-width: 576px) {\n    grid-template-columns: 1fr 1fr;\n    margin: 0;\n    max-width: none;\n  }\n`;\n_c2 = Hero;\nexport default Farm;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Farm\");\n$RefreshReg$(_c2, \"Hero\");","map":{"version":3,"sources":["C:/Users/frkul/Documents/smurf.money/SMURF-frontend/src/views/Pools/BLZDStaking.tsx"],"names":["React","useMemo","Route","useRouteMatch","styled","useWallet","Heading","orderBy","partition","useI18n","usePools","useBlock","FlexLayout","Page","PoolCard","PoolTabButtons","Divider","Farm","path","TranslateString","account","pools","blockNumber","finishedPools","openPools","pool","isFinished","endBlock","textAlign","map","sousId","Hero","div","theme","colors","primary"],"mappings":"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","sourcesContent":["import React, { useMemo } from 'react'\r\nimport { Route, useRouteMatch } from 'react-router-dom'\r\nimport styled from 'styled-components'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { Heading } from '@blzd-dev/uikit'\r\nimport orderBy from 'lodash/orderBy'\r\nimport partition from 'lodash/partition'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { usePools, useBlock } from 'state/hooks'\r\nimport FlexLayout from 'components/layout/Flex'\r\nimport Page from 'components/layout/Page'\r\n// import Coming from './components/Coming'\r\nimport PoolCard from './components/PoolCard'\r\nimport PoolTabButtons from './components/PoolTabButtons'\r\nimport Divider from './components/Divider'\r\n\r\nconst Farm: React.FC = () => {\r\n  const { path } = useRouteMatch()\r\n  const TranslateString = useI18n()\r\n  const { account } = useWallet()\r\n  const pools = usePools(account)\r\n  const { blockNumber } = useBlock()\r\n\r\n  const [finishedPools, openPools] = useMemo(\r\n    () => partition(pools, (pool) => pool.isFinished || blockNumber > pool.endBlock),\r\n    [blockNumber, pools],\r\n  )\r\n\r\n  return (\r\n    <Page>\r\n      <Hero>\r\n        <div>\r\n          <Heading as=\"h1\" size=\"xxl\" mb=\"16px\">\r\n            {TranslateString(282, 'BLZD Pool')}\r\n          </Heading>\r\n          <ul>\r\n            <li>{TranslateString(580, 'Stake BLZD to earn tokens.')}</li>\r\n            <li>{TranslateString(404, 'You can unstake at any time.')}</li>\r\n            <li>{TranslateString(406, 'Rewards are calculated per block.')}</li>\r\n          </ul>\r\n        </div>\r\n        <div style={{ textAlign: 'right' }}>\r\n          <img\r\n            src=\"https://www.smurf.money/images/blzdstakepage.png\"\r\n            alt=\"BLZD Pool icon\"\r\n          />\r\n        </div>\r\n      </Hero>\r\n      <PoolTabButtons />\r\n      <Divider />\r\n      <FlexLayout>\r\n        <Route exact path={`${path}`}>\r\n          <>\r\n            {orderBy(openPools, ['sortOrder']).map((pool) => (\r\n              <PoolCard key={pool.sousId} pool={pool} />\r\n            ))}\r\n            {/* <Coming /> */}\r\n          </>\r\n        </Route>\r\n        <Route path={`${path}/history`}>\r\n          {orderBy(finishedPools, ['sortOrder']).map((pool) => (\r\n            <PoolCard key={pool.sousId} pool={pool} />\r\n          ))}\r\n        </Route>\r\n      </FlexLayout>\r\n    </Page>\r\n  )\r\n}\r\n\r\nconst Hero = styled.div`\r\n  align-items: center;\r\n  color: ${({ theme }) => theme.colors.primary};\r\n  display: grid;\r\n  grid-gap: 32px;\r\n  grid-template-columns: 1fr;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  max-width: 250px;\r\n  padding: 48px 0;\r\n  ul {\r\n    margin: 0;\r\n    padding: 0;\r\n    list-style-type: none;\r\n    font-size: 16px;\r\n    li {\r\n      margin-bottom: 4px;\r\n    }\r\n  }\r\n  img {\r\n    height: auto;\r\n    max-width: 396px;\r\n  }\r\n  @media (min-width: 576px) {\r\n    grid-template-columns: 1fr 1fr;\r\n    margin: 0;\r\n    max-width: none;\r\n  }\r\n`\r\n\r\nexport default Farm\r\n"]},"metadata":{},"sourceType":"module"}